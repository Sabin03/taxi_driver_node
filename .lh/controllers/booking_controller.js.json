{
    "sourceFile": "controllers/booking_controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1725114123778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725114182743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1182,23 +1182,15 @@\n     //`bd`.`pickup_lat`, `bd`.`pickup_long`,\n     var latitude = parseFloat(bookingDetail.pickup_lat)\n     var longitude = parseFloat(bookingDetail.pickup_long)\n \n-    helper.findNearByLocation(latitude, longitude, 40, (minLat, maxLat, minLng, maxLng) => {\n+    helper.findNearByLocation(latitude, longitude, 20, (minLat, maxLat, minLng, maxLng) => {\n         var allReadySendRequest = bookingDetail.request_driver_id\n         if (allReadySendRequest == \"\") {\n             allReadySendRequest = \"''\"\n         }\n \n-        helper.Dlog(   \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n-        \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n-        \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n-        \"INNER JOIN `zone_wise_cars_service` AS `zwcs` ON `ud`.`car_id` = `zwcs`.`user_car_id` AND `zwcs`.`zone_doc_id` = `zd`.`zone_doc_id` \" +\n-        \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \");\n \n-        helper.Dlog([bookingDetail.service_id, bookingDetail.price_id, helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"), helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"), helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete]\n-    );\n-\n         db.query(\n             \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n             \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n             \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n"
                },
                {
                    "date": 1725297550986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1182,9 +1182,9 @@\n     //`bd`.`pickup_lat`, `bd`.`pickup_long`,\n     var latitude = parseFloat(bookingDetail.pickup_lat)\n     var longitude = parseFloat(bookingDetail.pickup_long)\n \n-    helper.findNearByLocation(latitude, longitude, 20, (minLat, maxLat, minLng, maxLng) => {\n+    helper.findNearByLocation(latitude, longitude, 10000, (minLat, maxLat, minLng, maxLng) => {\n         var allReadySendRequest = bookingDetail.request_driver_id\n         if (allReadySendRequest == \"\") {\n             allReadySendRequest = \"''\"\n         }\n"
                },
                {
                    "date": 1725300175498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1178,131 +1178,130 @@\n     })\n }\n \n function driverNewRequestSend(bookingDetail, callback) {\n-    //`bd`.`pickup_lat`, `bd`.`pickup_long`,\n-    var latitude = parseFloat(bookingDetail.pickup_lat)\n-    var longitude = parseFloat(bookingDetail.pickup_long)\n+    // Parse latitude and longitude from bookingDetail\n+    var latitude = parseFloat(bookingDetail.pickup_lat);\n+    var longitude = parseFloat(bookingDetail.pickup_long);\n \n-    helper.findNearByLocation(latitude, longitude, 10000, (minLat, maxLat, minLng, maxLng) => {\n-        var allReadySendRequest = bookingDetail.request_driver_id\n+    // Log the parsed latitude and longitude\n+    console.log(\"Parsed Latitude:\", latitude);\n+    console.log(\"Parsed Longitude:\", longitude);\n+\n+    helper.findNearByLocation(latitude, longitude, 20, (minLat, maxLat, minLng, maxLng) => {\n+        // Log the calculated min and max latitude and longitude\n+        console.log(\"minLat:\", minLat);\n+        console.log(\"maxLat:\", maxLat);\n+        console.log(\"minLng:\", minLng);\n+        console.log(\"maxLng:\", maxLng);\n+\n+        var allReadySendRequest = bookingDetail.request_driver_id;\n         if (allReadySendRequest == \"\") {\n-            allReadySendRequest = \"''\"\n+            allReadySendRequest = \"''\";\n         }\n \n+        helper.Dlog(\"allReady_SendRequest :- \" + allReadySendRequest);\n \n+        // Log the SQL query parameters\n+        var queryParams = [\n+            bookingDetail.service_id,\n+            bookingDetail.price_id,\n+            helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"),\n+            helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"),\n+            helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC),\n+            bs_complete\n+        ];\n+        console.log(\"Query Parameters:\", queryParams);\n+\n         db.query(\n             \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n             \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n             \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n             \"INNER JOIN `zone_wise_cars_service` AS `zwcs` ON `ud`.`car_id` = `zwcs`.`user_car_id` AND `zwcs`.`zone_doc_id` = `zd`.`zone_doc_id` \" +\n-            \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \", [bookingDetail.service_id, bookingDetail.price_id, helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"), helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"), helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete], (err, result) => {\n-\n+            \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \",\n+            queryParams,\n+            (err, result) => {\n                 if (err) {\n                     helper.ThrowHtmlError(err);\n-                    return\n+                    return;\n                 }\n \n                 if (result.length > 0) {\n-\n                     result.forEach((driverInfo, index) => {\n                         result[index].distance = helper.distance(latitude, longitude, driverInfo.lati, driverInfo.longi);\n                     });\n \n                     for (var i = 0; i < result.length; i++) {\n                         for (var j = i; j < result.length; j++) {\n                             if (result[i].distance > result[j].distance) {\n-                                result.swap(i, j)\n+                                result.swap(i, j);\n                             }\n                         }\n                     }\n \n-                    //Driver List New Request Send Logic\n-                    //Driver For only Live Socket\n-\n                     for (var i = 0, len = result.length; i < len; i++) {\n-\n                         var driverSocket = controllerSocketList['us_' + result[0].user_id];\n                         if (driverSocket && controllerIO.sockets.sockets.get(driverSocket.socket_id)) {\n+                            driverSendRequestFire(bookingDetail, result[i], true);\n \n-                            //Driver Push Notification Fire Logic\n-\n-                            driverSendRequestFire(bookingDetail, result[i], true)\n-\n                             var response = {\n                                 \"status\": \"1\",\n                                 \"payload\": [bookingDetail]\n-                            }\n+                            };\n \n-                            controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"new_ride_request\", response)\n+                            controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"new_ride_request\", response);\n                             return callback(1, bookingDetail);\n-\n                         } else {\n                             helper.Dlog(\"driverSocket client not connected\");\n                             helper.Dlog(result[i]);\n                         }\n-\n                     }\n \n-                    //Driver not live socket then New Request SendNear by first driver only notification\n                     helper.Dlog(\"new request push notification fire\");\n-                    driverSendRequestFire(bookingDetail, result[0], true)\n-                    return callback(1, bookingDetail)\n-\n+                    driverSendRequestFire(bookingDetail, result[0], true);\n+                    return callback(1, bookingDetail);\n                 } else {\n-                    //no Driver Available\n-                    helper.Dlog(\" No Driver Available : \" + bookingDetail.accpet_driver_id)\n+                    helper.Dlog(\"No Driver Available: \" + bookingDetail.accpet_driver_id);\n \n                     if (bookingDetail.accpet_driver_id != undefined && bookingDetail.accpet_driver_id != \"\") {\n-                        //Recall Driver Not Driver Found\n-                        db.query(\"UPDATE `booking_detail` SET `driver_id` = `accpet_driver_id` WHERE `booking_id` = ? \", [bookingDetail.booking_id], (err, result) => {\n+                        db.query(\"UPDATE `booking_detail` SET `driver_id` = `accpet_driver_id` WHERE `booking_id` = ?\", [bookingDetail.booking_id], (err, result) => {\n                             if (err) {\n                                 helper.ThrowHtmlError(err);\n-                                return\n+                                return;\n                             }\n \n                             if (result.affectedRows > 0) {\n-                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n+                                helper.Dlog(\"Recall Driver Near info not Driver available\");\n                             } else {\n-                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n+                                helper.Dlog(\"Recall Driver Near info not Driver available\");\n                             }\n \n-                            return callback(2, \"recall driver not available\")\n-                        })\n+                            return callback(2, \"recall driver not available\");\n+                        });\n                     } else {\n-                        //New Booking Request\n                         db.query(\"UPDATE `booking_detail` SET `booking_status` = ?, `stop_time` = NOW() WHERE `booking_id` = ?\", [bs_no_driver, bookingDetail.booking_id], (err, result) => {\n-\n                             if (err) {\n                                 helper.ThrowHtmlError(err);\n-                                return\n+                                return;\n                             }\n \n                             if (result.affectedRows > 0) {\n                                 helper.Dlog(\"Booking Status \" + bs_no_driver);\n-                                helper.Dlog(\"Near info not Driver available\")\n+                                helper.Dlog(\"Near info not Driver available\");\n                             } else {\n-                                helper.Dlog(\"Near info not Driver available\")\n+                                helper.Dlog(\"Near info not Driver available\");\n                             }\n \n-                            // user ride refund amount\n-\n-                            return callback(2, \"driver not available\")\n-                        })\n+                            return callback(2, \"driver not available\");\n+                        });\n                     }\n-\n                 }\n             }\n-        )\n+        );\n+    });\n+}\n \n-    })\n \n-    //Driver Api\n-\n-\n-\n-}\n-\n function driverSendRequestFire(bookingDetail, driverDetail, isSendNotification) {\n     var requestToken = helper.createRequestToken()\n     helper.Dlog(\" --------- Request Token Create -------------\");\n \n"
                },
                {
                    "date": 1725301576533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1178,130 +1178,131 @@\n     })\n }\n \n function driverNewRequestSend(bookingDetail, callback) {\n-    // Parse latitude and longitude from bookingDetail\n-    var latitude = parseFloat(bookingDetail.pickup_lat);\n-    var longitude = parseFloat(bookingDetail.pickup_long);\n+    //`bd`.`pickup_lat`, `bd`.`pickup_long`,\n+    var latitude = parseFloat(bookingDetail.pickup_lat)\n+    var longitude = parseFloat(bookingDetail.pickup_long)\n \n-    // Log the parsed latitude and longitude\n-    console.log(\"Parsed Latitude:\", latitude);\n-    console.log(\"Parsed Longitude:\", longitude);\n-\n     helper.findNearByLocation(latitude, longitude, 20, (minLat, maxLat, minLng, maxLng) => {\n-        // Log the calculated min and max latitude and longitude\n-        console.log(\"minLat:\", minLat);\n-        console.log(\"maxLat:\", maxLat);\n-        console.log(\"minLng:\", minLng);\n-        console.log(\"maxLng:\", maxLng);\n-\n-        var allReadySendRequest = bookingDetail.request_driver_id;\n+        var allReadySendRequest = bookingDetail.request_driver_id\n         if (allReadySendRequest == \"\") {\n-            allReadySendRequest = \"''\";\n+            allReadySendRequest = \"''\"\n         }\n \n-        helper.Dlog(\"allReady_SendRequest :- \" + allReadySendRequest);\n \n-        // Log the SQL query parameters\n-        var queryParams = [\n-            bookingDetail.service_id,\n-            bookingDetail.price_id,\n-            helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"),\n-            helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"),\n-            helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC),\n-            bs_complete\n-        ];\n-        console.log(\"Query Parameters:\", queryParams);\n-\n         db.query(\n             \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n             \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n             \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n             \"INNER JOIN `zone_wise_cars_service` AS `zwcs` ON `ud`.`car_id` = `zwcs`.`user_car_id` AND `zwcs`.`zone_doc_id` = `zd`.`zone_doc_id` \" +\n-            \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \",\n-            queryParams,\n-            (err, result) => {\n+            \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \", [bookingDetail.service_id, bookingDetail.price_id, helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"), helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"), helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete], (err, result) => {\n+\n                 if (err) {\n                     helper.ThrowHtmlError(err);\n-                    return;\n+                    return\n                 }\n \n                 if (result.length > 0) {\n+\n                     result.forEach((driverInfo, index) => {\n                         result[index].distance = helper.distance(latitude, longitude, driverInfo.lati, driverInfo.longi);\n                     });\n \n                     for (var i = 0; i < result.length; i++) {\n                         for (var j = i; j < result.length; j++) {\n                             if (result[i].distance > result[j].distance) {\n-                                result.swap(i, j);\n+                                result.swap(i, j)\n                             }\n                         }\n                     }\n \n+                    //Driver List New Request Send Logic\n+                    //Driver For only Live Socket\n+\n                     for (var i = 0, len = result.length; i < len; i++) {\n+\n                         var driverSocket = controllerSocketList['us_' + result[0].user_id];\n                         if (driverSocket && controllerIO.sockets.sockets.get(driverSocket.socket_id)) {\n-                            driverSendRequestFire(bookingDetail, result[i], true);\n \n+                            //Driver Push Notification Fire Logic\n+\n+                            driverSendRequestFire(bookingDetail, result[i], true)\n+\n                             var response = {\n                                 \"status\": \"1\",\n                                 \"payload\": [bookingDetail]\n-                            };\n+                            }\n \n-                            controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"new_ride_request\", response);\n+                            controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"new_ride_request\", response)\n                             return callback(1, bookingDetail);\n+\n                         } else {\n                             helper.Dlog(\"driverSocket client not connected\");\n                             helper.Dlog(result[i]);\n                         }\n+\n                     }\n \n+                    //Driver not live socket then New Request SendNear by first driver only notification\n                     helper.Dlog(\"new request push notification fire\");\n-                    driverSendRequestFire(bookingDetail, result[0], true);\n-                    return callback(1, bookingDetail);\n+                    driverSendRequestFire(bookingDetail, result[0], true)\n+                    return callback(1, bookingDetail)\n+\n                 } else {\n-                    helper.Dlog(\"No Driver Available: \" + bookingDetail.accpet_driver_id);\n+                    //no Driver Available\n+                    helper.Dlog(\" No Driver Available : \" + bookingDetail.accpet_driver_id)\n \n                     if (bookingDetail.accpet_driver_id != undefined && bookingDetail.accpet_driver_id != \"\") {\n-                        db.query(\"UPDATE `booking_detail` SET `driver_id` = `accpet_driver_id` WHERE `booking_id` = ?\", [bookingDetail.booking_id], (err, result) => {\n+                        //Recall Driver Not Driver Found\n+                        db.query(\"UPDATE `booking_detail` SET `driver_id` = `accpet_driver_id` WHERE `booking_id` = ? \", [bookingDetail.booking_id], (err, result) => {\n                             if (err) {\n                                 helper.ThrowHtmlError(err);\n-                                return;\n+                                return\n                             }\n \n                             if (result.affectedRows > 0) {\n-                                helper.Dlog(\"Recall Driver Near info not Driver available\");\n+                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n                             } else {\n-                                helper.Dlog(\"Recall Driver Near info not Driver available\");\n+                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n                             }\n \n-                            return callback(2, \"recall driver not available\");\n-                        });\n+                            return callback(2, \"recall driver not available\")\n+                        })\n                     } else {\n+                        //New Booking Request\n                         db.query(\"UPDATE `booking_detail` SET `booking_status` = ?, `stop_time` = NOW() WHERE `booking_id` = ?\", [bs_no_driver, bookingDetail.booking_id], (err, result) => {\n+\n                             if (err) {\n                                 helper.ThrowHtmlError(err);\n-                                return;\n+                                return\n                             }\n \n                             if (result.affectedRows > 0) {\n                                 helper.Dlog(\"Booking Status \" + bs_no_driver);\n-                                helper.Dlog(\"Near info not Driver available\");\n+                                helper.Dlog(\"Near info not Driver available\")\n                             } else {\n-                                helper.Dlog(\"Near info not Driver available\");\n+                                helper.Dlog(\"Near info not Driver available\")\n                             }\n \n-                            return callback(2, \"driver not available\");\n-                        });\n+                            // user ride refund amount\n+\n+                            return callback(2, \"driver not available\")\n+                        })\n                     }\n+\n                 }\n             }\n-        );\n-    });\n+        )\n+\n+    })\n+\n+    //Driver Api\n+\n+\n+\n }\n \n-\n function driverSendRequestFire(bookingDetail, driverDetail, isSendNotification) {\n     var requestToken = helper.createRequestToken()\n     helper.Dlog(\" --------- Request Token Create -------------\");\n \n"
                }
            ],
            "date": 1725114123778,
            "name": "Commit-0",
            "content": "var db = require('./../helpers/db_helpers')\nvar helper = require('./../helpers/helpers')\nvar multiparty = require('multiparty')\nvar fs = require('fs');\nconst { duration } = require('moment-timezone');\nvar imageSavePath = \"./public/img/\"\n\n//Booking Status\n\nconst bs_pending = 0\nconst bs_accept = 1\nconst bs_go_user = 2\nconst bs_wait_user = 3\nconst bs_start = 4\nconst bs_complete = 5\nconst bs_cancel = 6\nconst bs_no_driver = 7\nconst rideCommissionVal = 10.0\n\n//Notification ID\n\nconst nt_id_1_new_request = \"1\"\nconst nt_id_2_accpet_request = \"2\"\nconst nt_id_3_driver_wait = \"3\"\nconst nt_id_4_ride_start = \"4\"\nconst nt_id_5_ride_complete = \"5\"\nconst nt_id_6_ride_cancel = \"6\"\nconst nt_id_7_drive_no_available = \"7\"\n\n//Notification ID\n\nconst nt_t_1_new_request = \"New Request\"\nconst nt_t_2_accpet_request = \"Driver Accepted\"\nconst nt_t_3_driver_wait = \"Driver is waiting\"\nconst nt_t_4_ride_start = \"Ride Started\"\nconst nt_t_5_ride_complete = \"Ride Completed\"\nconst nt_t_6_ride_cancel = \"Ride Cancelled\"\nconst nt_t_7_drive_no_available = \"No Driver available\"\n\n//User Type:\nconst ut_admin = 4\nconst ut_driver = 2\nconst ut_user = 1\n\nvar controllerIO;\nvar controllerSocketList;\n\nconst newRequestTimeABC = 15 // time in 30 min\nconst requestAcceptTime = 60 // time in second\nconst requestWaitingAcceptTime = requestAcceptTime + 5 // time in second\nconst userRideCancelTime = 60 * 5 // time in second\nconst userWaitingTime = 60 * 5 // time in second\n\nconst requestPendingArray = [];\nconst userLocationInfoArray = {};\nconst driverUserWaitingArray = {};\n\nmodule.exports.controller = (app, io, socket_list) => {\n\n    controllerIO = io;\n    controllerSocketList = socket_list;\n\n    const msg_success = \"successfully\";\n    const msg_fail = \"fail\";\n    const msg_invalidUser = \"invalid username\";\n    const msg_all_ready_book = \"all ready other ride scheduled booking.\"\n\n\n\n    //App Api\n\n    app.post('/api/booking_request', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"pickup_latitude\", \"pickup_longitude\", \"pickup_address\", \"drop_latitude\", \"drop_longitude\", \"drop_address\", \"pickup_date\", \"payment_type\", \"card_id\", \"price_id\", \"est_total_distance\", 'est_duration', 'amount', \"service_id\"], () => {\n\n                helper.Dlog(\" Date Time:  \" + helper.serverDateTimeAddMin(reqObj.pickup_date, \"YYYY-MM-DD HH:mm:ss\", -newRequestTimeABC) + \" , \" + helper.serverDateTimeAddMin(reqObj.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC));\n                db.query(\n\n                    //Check Per Pending Request  8:45 to 9:15 \n                    //Booking Time = 9:00 \n\n\n\n                    \"SELECT COUNT (*) AS `booking_count` FROM `booking_detail` WHERE `user_id` = ? AND (`pickup_date` BETWEEN ? AND ?) AND `booking_status` < ? ;\" +\n\n                    \"SELECT `pd`.`base_charge`, `pd`.`booking_charge`, `zl`.`tax`, `pd`.`per_km_charge`, `pd`.`per_min_charge`, `pd`.`mini_fair`, `pd`.`mini_km`, `cancel_charge` FROM `price_detail` AS `pd` INNER JOIN `zone_list` AS `zl` ON `zl`.`zone_id` = `pd`.`zone_id` WHERE `pd`.`price_id` = ? ;\",\n\n\n\n\n                    [uObj.user_id, helper.serverDateTimeAddMin(reqObj.pickup_date, \"YYYY-MM-DD HH:mm:ss\", -newRequestTimeABC), helper.serverDateTimeAddMin(reqObj.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete, reqObj.price_id], (err, result) => {\n\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n                        if (result[0][0].booking_count == 0) {\n\n                            if (result[1].length > 0) {\n\n                                var amount = parseInt(reqObj.amount);\n                                var driverAmount = '0';\n                                var rideCommission = '0';\n                                var taxAmount = '0';\n\n                                // 110% 1000\n                                var totalAmount = amount * 100 / (100 + parseInt(result[1][0].tax)) // 1000 * 100 / (100 + 10)\n\n\n                                //10 %\n                                taxAmount = (amount - totalAmount).toFixed(3); // 110% - 100% = 10% amount\n\n                                driverAmount = ((totalAmount - parseFloat(result[1][0].booking_charge)) * (1 - (rideCommissionVal / 100.0))).toFixed(2)\n\n                                rideCommission = parseFloat(totalAmount - driverAmount).toFixed(2)\n\n                                helper.Dlog([\n\n                                    reqObj.card_id, reqObj.payment_type, amount, 0,\n                                    driverAmount, taxAmount, rideCommission\n                                ]);\n\n                                db.query(\"INSERT INTO `payment_detail` ( `card_id`, `payment_type`, `amt`, `discount_amt`, `driver_amt`, `tax_amt`, `ride_commission`,  `created_date`, `modify_date` ) VALUES (?,?,?, ?,?,?, ?,NOW(),NOW()) \", [\n\n                                    reqObj.card_id, reqObj.payment_type, amount, 0,\n                                    driverAmount, taxAmount, rideCommission\n                                ], (err, pResult) => {\n\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res);\n                                        return\n                                    }\n\n                                    if (pResult) {\n\n                                        db.query(\n                                            \"INSERT INTO `booking_detail`( `user_id`, `pickup_lat`, `pickup_long`, `pickup_address`, `drop_lat`, `drop_long`, `drop_address`, `pickup_date`, `service_id`, `price_id`, `payment_id`, `est_total_distance`, `est_duration`,  `created_date`) VALUES (?,?,?, ?,?,?, ?,?,?,  ?,?,?, ?, NOW())\", [\n\n                                            uObj.user_id, reqObj.pickup_latitude, reqObj.pickup_longitude,\n\n                                            reqObj.pickup_address, reqObj.drop_latitude, reqObj.drop_longitude, reqObj.drop_address, reqObj.pickup_date, reqObj.service_id, reqObj.price_id, pResult.insertId, reqObj.est_total_distance, reqObj.est_duration\n\n                                        ], (err, result) => {\n\n                                            if (err) {\n                                                helper.ThrowHtmlError(err, res);\n                                                return\n                                            }\n\n                                            if (result) {\n                                                // UserBooking  Done\n\n                                                db.query(\"SELECT `bd`.`booking_id`, `bd`.`driver_id`, `bd`.`user_id`, `bd`.`pickup_lat`, `bd`.`pickup_long`, `bd`.`pickup_address`, `bd`.`drop_lat`, `bd`.`drop_long`, `bd`.`drop_address`, `bd`.`pickup_date`, `bd`.`service_id`, `bd`.`price_id`, `bd`.`payment_id`, `bd`.`est_total_distance`, `bd`.`est_duration`,  `bd`.`created_date`, `bd`.`accpet_time`, `bd`.`start_time`, `bd`.`stop_time`, `bd`.`booking_status`, `bd`.`request_driver_id`, `pd`.`zone_id`, `pd`.`mini_km`, `sd`.`service_name`, `sd`.`color`, `sd`.`icon`, `ud`.`name`, `ud`.`mobile`, `ud`.`mobile_code`, `ud`.`push_token`, (CASE WHEN `ud`.`image` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' , `ud`.`image`  ) ELSE '' END) AS `image`, `ppd`.`amt`, `ppd`.`driver_amt`, `ppd`.`payment_type` FROM `booking_detail` AS `bd` \" +\n                                                    \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                                                    \"INNER JOIN `price_detail` AS `pd` ON `pd`.`price_id` = `bd`.`price_id` \" +\n                                                    \"INNER JOIN `payment_detail` AS `ppd` ON `ppd`.`payment_id` = `bd`.`payment_id` \" +\n                                                    \"INNER JOIN `service_detail` AS `sd` ON `bd`.`service_id` = `sd`.`service_id` \" +\n\n                                                    //payment_detail\n                                                    \"WHERE `bd`.`booking_id` = ? AND `bd`.`booking_status` = ?\",\n\n                                                    [result.insertId, bs_pending], (err, result) => {\n\n                                                        if (err) {\n                                                            helper.ThrowHtmlError(err, res);\n                                                            return\n                                                        }\n\n\n                                                        if (result.length > 0) {\n                                                            driverNewRequestSend(result[0], (status, bookingInfo) => {\n\n                                                                helper.Dlog(\"-------- new request send callback -------\")\n                                                                if (status == 1) {\n                                                                    res.json({\n                                                                        \"status\": \"1\",\n                                                                        \"payload\": result[0],\n                                                                        \"message\": \"booking request send successfully\"\n                                                                    })\n                                                                } else {\n                                                                    res.json({\n                                                                        \"status\": \"2\",\n                                                                        \"payload\": result[0],\n                                                                        \"message\": bookingInfo\n                                                                    })\n                                                                }\n\n                                                            })\n\n                                                        } else {\n                                                            helper.Dlog(\"Not Booking info get\")\n                                                        }\n\n                                                    })\n\n                                            } else {\n                                                res.json(\n                                                    {\n                                                        \"status\": \"0\",\n                                                        \"message\": \"booking fail\"\n                                                    }\n                                                )\n                                            }\n\n                                        }\n                                        )\n\n                                    } else {\n                                        res.json(\n                                            {\n                                                \"status\": \"0\",\n                                                \"message\": \"booking fail\"\n                                            }\n                                        )\n                                    }\n\n                                })\n\n\n                            } else {\n                                res.json(\n                                    {\n                                        \"status\": \"0\",\n                                        \"message\": \"invalid service\"\n                                    }\n                                )\n                            }\n\n\n                        } else {\n                            res.json(\n                                {\n                                    \"status\": \"0\",\n                                    \"message\": msg_all_ready_book\n                                }\n                            )\n                        }\n                    })\n\n\n            })\n        })\n    })\n\n    app.post('/api/update_location', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"latitude\", \"longitude\", \"socket_id\"], () => {\n                var location = {\n\n                    'latitude': reqObj.latitude,\n                    'longitude': reqObj.longitude\n                }\n                socket_list[\"us_\" + uObj.user_id.toString()] = {\n                    'socket_id': reqObj.socket_id\n                };\n\n                userLocationInfoArray['us_' + uObj.user_id] = {\n                    \"location\": location\n                }\n                // Tracking OP\n\n                db.query(\"UPDATE `user_detail` SET `lati` = ? , `longi` = ? WHERE `user_id` = ? AND `user_type` = ? \", [\n                    reqObj.latitude, reqObj.longitude, uObj.user_id, ut_driver\n                ], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n                    if (result.affectedRows > 0) {\n                        res.json({\n                            'status': \"1\",\n                            \"message\": msg_success\n                        })\n                    } else {\n                        res.json({\n                            'status': \"0\",\n                            \"message\": msg_fail\n                        })\n                    }\n                })\n\n            })\n        })\n    })\n\n    app.post('/api/ride_request_accept', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"request_token\"], () => {\n                db.query(\"SELECT `booking_status` FROM `booking_detail` WHERE `booking_id` = ? \", [reqObj.booking_id], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n                    if (result.length > 0) {\n\n                        if (requestPendingArray[reqObj.request_token] == undefined || requestPendingArray[reqObj.request_token] == null) {\n                            res.json({\n                                \"success\": \"2\",\n                                \"message\": \"request token invalid\"\n                            })\n                        } else {\n                            if (result[0].booking_status == bs_cancel) {\n                                res.json(\n                                    {\n                                        \"success\": \"2\",\n                                        \"message\": \"ride user cancel request\"\n                                    }\n                                )\n                            } else {\n                                var otpCode = Math.floor(1000 + Math.random() * 9000);\n\n                                db.query(\"UPDATE `booking_detail` AS `bd` \" +\n                                    \"INNER JOIN  `user_detail` AS `ud` ON `bd`.`driver_id` = `ud`.`user_id` \" +\n                                    \"INNER JOIN `user_detail` AS `rud` ON `bd`.`user_id` = `rud`.`user_id` \" +\n                                    \"INNER JOIN `service_detail` AS `sd` ON `bd`.`service_id` = `sd`.`service_id` \" +\n                                    \"SET `bd`.`booking_status` = '\" + bs_go_user + \"', `ud`.`status` = 2, `rud`.`status` = 2, `bd`.`accpet_time` = NOW(), `bd`.`start_time` = NOW(), `bd`.`user_car_id` = `ud`.`car_id`, `ud`.`is_request_send` = ? , `bd`.`otp_code` = ? WHERE `bd`.`booking_id` = ? AND `bd`.`driver_id` = ? \", [2, otpCode, reqObj.booking_id, uObj.user_id\n                                ], (err, result) => {\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res);\n                                        return\n                                    }\n\n                                    if (result.affectedRows > 0) {\n                                        removeRequestTokenPendingArr[reqObj.request_token];\n\n                                        helper.Dlog(\"--------------------- ride accepted successfully --------------\")\n                                        res.json({\n                                            \"status\": \"1\",\n                                            \"message\": \"ride accepted successfully\"\n                                        })\n\n                                        db.query(\"SELECT `ud`.`push_token`, `ud`.`user_id`, `bd`.`pickup_date`  FROM `booking_detail` AS `bd`\" +\n                                            \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                                            \"WHERE `bd`.`booking_id` = ?\", [reqObj.booking_id], (err, result) => {\n                                                if (err) {\n                                                    helper.ThrowHtmlError(err);\n                                                    return\n                                                }\n\n                                                if (result.length > 0) {\n                                                    helper.Dlog(result);\n                                                    helper.Dlog(\"--------------------- ride accepted successfully \" + result[0].user_id + \"--------------\")\n                                                    var userSocket = controllerSocketList['us_' + result[0].user_id];\n                                                    if (userSocket && controllerIO.sockets.sockets.get(userSocket.socket_id)) {\n\n                                                        var response = {\n                                                            \"status\": \"1\",\n                                                            \"payload\": {\n                                                                \"booking_id\": parseInt(reqObj.booking_id),\n                                                                \"booking_status\": bs_accept,\n                                                                \"ride_cancel\": userRideCancelTime\n                                                            },\n                                                            \"message\": \"driver accepted your request\"\n                                                        }\n\n                                                        controllerIO.sockets.sockets.get(userSocket.socket_id).emit(\"user_request_accept\", response)\n                                                    }\n\n                                                    oneSignalPushFire('1', [result[0].push_token], nt_t_2_accpet_request, \"driver ride are accepted\", {\n                                                        \"booking_id\": reqObj.booking_id,\n                                                        \"booking_status\": bs_accept.toString(),\n                                                        \"ride_cancel\": userRideCancelTime.toString(),\n                                                        \"notification_id\": nt_id_2_accpet_request\n                                                    })\n\n                                                }\n                                            }\n                                        )\n\n                                    } else {\n                                        res.json(\n                                            {\n                                                \"success\": \"0\",\n                                                \"message\": msg_fail\n                                            }\n                                        )\n                                    }\n                                })\n                            }\n                        }\n\n\n                    } else {\n                        res.json({\n                            \"success\": \"0\",\n                            \"message\": msg_fail\n                        })\n                    }\n                })\n            })\n        }, ut_driver)\n\n    })\n\n    app.post('/api/ride_request_decline', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"request_token\"], () => {\n                if (requestPendingArray[reqObj.request_token] == undefined || requestPendingArray[reqObj.request_token] == null) {\n                    res.json({\n                        \"success\": \"2\",\n                        \"message\": \"request token invalid\"\n                    })\n                } else {\n                    db.query(\"UPDATE `user_detail` SET `is_request_send` = ? WHERE `user_id` = ? \", [0, uObj.user_id], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n                        if (result.affectedRows > 0) {\n                            removeRequestTokenPendingArr(\n                                reqObj.request_token\n                            );\n                            res.json({\n                                \"status\": \"1\",\n                                \"message\": \"ride request decline successfully\"\n                            })\n\n                            driverNewRequestSendByBookingID(reqObj.booking_id);\n\n                        } else {\n                            res.json({\n                                \"status\": \"0\",\n                                \"message\": msg_fail\n                            })\n                        }\n                    })\n                }\n            })\n        }, ut_driver)\n\n    })\n\n    app.post('/api/driver_cancel_ride', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"booking_status\"], () => {\n                if (reqObj.booking_status == bs_wait_user || reqObj.booking_status == bs_go_user) {\n                    userRideCancel(reqObj.booking_id, reqObj.booking_status, uObj.user_id, ut_driver, false, (resObj) => {\n                        res.json(resObj)\n                    })\n                } else {\n                    res.json({\n                        \"success\": \"0\",\n                        \"message\": \"Not Ride Cancelled! Only Recall Ride is available before starting of ride\"\n                    })\n                }\n            })\n        }, ut_driver)\n    })\n\n    app.post('/api/user_cancel_ride', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"booking_status\"], () => {\n                userRideCancel(reqObj.booking_id, reqObj.booking_status, uObj.user_id, ut_user, false, (resObj) => {\n                    res.json(resObj)\n                })\n            })\n        }, ut_user)\n    })\n\n    app.post('/api/user_cancel_ride_force', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"booking_status\"], () => {\n                userRideCancel(reqObj.booking_id, reqObj.booking_status, uObj.user_id, ut_user, true, (resObj) => {\n                    res.json(resObj)\n                })\n            })\n        }, ut_user)\n    })\n\n    app.post('/api/booking_detail', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\"], () => {\n                bookingInformationDetail(reqObj.booking_id, uObj.user_type, (status, result) => {\n                    if (status == 0) {\n                        //User Booking Detail Not Request Ride Only\n\n                        if (uObj.user_type == ut_user) {\n                            bookingInformationDetail(reqObj.booking_id, \"2\", (status, result) => {\n                                if (status == 0) {\n                                    res.json({ \"status\": \"0\", result })\n                                } else {\n                                    res.json(\n                                        {\n                                            'status': \"1\",\n                                            \"payload\": result[0]\n                                        }\n                                    )\n                                }\n                            });\n                        } else {\n                            res.json({ \"status\": \"0\", result })\n                        }\n                    } else {\n\n                        if (result[0].booking_status == bs_complete) {\n\n                            res.json(\n                                {\n                                    'status': \"1\",\n                                    \"payload\": result[0]\n                                }\n                            )\n                        } else {\n                            res.json(\n                                {\n                                    'status': \"1\",\n                                    \"payload\": result[0]\n                                }\n                            )\n                        }\n\n                    }\n                })\n            })\n        })\n    })\n\n    app.post('/api/driver_wait_user', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\"], () => {\n                db.query(\"UPDATE `booking_detail` SET `booking_status` = ?, `start_time` = NOW() WHERE `booking_id` = ? AND `driver_id` = ? AND `booking_status` < ? \", [bs_wait_user, reqObj.booking_id, uObj.user_id, bs_wait_user], (err, result) => {\n\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return;\n                    }\n\n                    if (result.affectedRows > 0) {\n\n                        db.query(\"SELECT  `bd`.*, `ud`.`push_token` FROM `booking_detail` AS `bd` \" +\n                            \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                            \"WHERE `bd`.`booking_id` = ? \", [reqObj.booking_id], (err, result) => {\n                                if (err) {\n                                    helper.ThrowHtmlError(err, res);\n                                    return;\n                                }\n\n                                if (result.length > 0) {\n                                    helper.timeDuration(result[0].pickup_date, helper.serverYYYYMMDDHHmmss(), (totalMin, _) => {\n\n                                        var waitingTime = userWaitingTime;\n\n                                        if (totalMin > 0) {\n                                            waitingTime += totalMin * 60;\n                                        }\n\n                                        driverUserWaitingTimeOver(reqObj.booking_id, waitingTime);\n\n                                        var userSocket = controllerSocketList['us_' + result[0].user_id];\n                                        if (userSocket && controllerIO.sockets.sockets.get(userSocket.socket_id)) {\n                                            var responseObj = {\n                                                \"status\": \"1\",\n                                                \"payload\": {\n                                                    \"booking_id\": parseInt(reqObj.booking_id),\n                                                    \"waiting\": waitingTime,\n                                                    \"booking_status\": bs_wait_user\n                                                },\n                                                \"message\": \"driver waiting\"\n                                            }\n\n                                            controllerIO.sockets.sockets.get(userSocket.socket_id).emit(\"driver_wait_user\", responseObj)\n\n\n                                        }\n\n                                        oneSignalPushFire(1, [result[0].push_token], nt_t_3_driver_wait, \"driver is waiting\", {\n                                            \"booking_id\": reqObj.booking_id,\n                                            \"waiting\": waitingTime,\n                                            \"booking_status\": bs_wait_user.toString(),\n                                            \"notification_id\": nt_id_3_driver_wait\n                                        })\n\n                                        bookingInformationDetail(reqObj.booking_id, '2', (status, result) => {\n\n                                            if (status != 0) {\n                                                result[0].waiting = waitingTime;\n                                                res.json({\n                                                    \"status\": \"1\",\n                                                    \"payload\": result[0],\n                                                    \"message\": \"user notified\"\n                                                })\n                                            }\n\n                                        })\n\n                                    })\n                                }\n                            })\n\n\n                    } else {\n                        res.json({\n                            \"status\": \"0\",\n                            \"message\": \"user wait fail\"\n                        })\n                    }\n                })\n            })\n        })\n\n    })\n\n    app.post('/api/ride_start', (req, res) => {\n\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"pickup_latitude\", \"pickup_longitude\", \"otp_code\"], () => {\n\n                var otp_code = Math.floor(1000 + Math.random() * 9000)\n                var sql = \"UPDATE `booking_detail` AS `bd` \" +\n                    \"INNER JOIN `user_detail` AS `dd` ON `dd`.`user_id` = `bd`.`driver_id` \" +\n                    \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                    \"INNER JOIN `service_detail` AS `sd` ON `bd`.`service_id` = `sd`.`service_id` \" +\n                    \"SET `bd`.`booking_status` = ?, `bd`.`pickup_lat` = ?, `bd`.`pickup_long` = ?, `bd`.`start_time` = NOW(), `dd`.`status` = 2, `ud`.`status` = 2, `bd`.`otp_code` = ? WHERE `bd`.`booking_id` = ? AND `bd`.`booking_status` < ? AND `bd`.`driver_id` = ? AND `bd`.`otp_code` = ?  \"\n\n                db.query(sql,\n                    [\n                        bs_start, reqObj.pickup_latitude, reqObj.pickup_longitude, otp_code, reqObj.booking_id, bs_start, uObj.user_id, reqObj.otp_code\n                    ], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return;\n                        }\n\n                        if (result.affectedRows > 0) {\n                            removeDriverWaitUser(reqObj.booking_id);\n                            bookingInformationDetail(reqObj.booking_id, '2', (status, result) => {\n\n                                if (status != 0) {\n\n                                    res.json({\n                                        \"status\": \"1\",\n                                        \"payload\": result[0],\n                                        \"message\": \"Ride stated successfully\"\n                                    })\n                                }\n\n                            })\n\n                            db.query(\"SELECT  `bd`.*, `ud`.`push_token`, `pd`.`mini_km` FROM `booking_detail` AS `bd` \" +\n                                \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                                \"INNER JOIN `price_detail` AS `pd` ON `bd`.`price_id` = `pd`.`price_id` \" +\n\n                                \"WHERE `bd`.`booking_id` = ? \", [reqObj.booking_id], (err, result) => {\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res);\n                                        return;\n                                    }\n\n                                    if (result.length > 0) {\n\n\n                                        var userSocket = controllerSocketList['us_' + result[0].user_id];\n                                        if (userSocket && controllerIO.sockets.sockets.get(userSocket.socket_id)) {\n                                            var responseObj = {\n                                                \"status\": \"1\",\n                                                \"payload\": {\n                                                    \"booking_id\": parseInt(reqObj.booking_id),\n\n                                                    \"booking_status\": bs_start\n                                                },\n                                                \"message\": \"driver started ride\"\n                                            }\n\n                                            controllerIO.sockets.sockets.get(userSocket.socket_id).emit(\"ride_start\", responseObj)\n\n\n                                        }\n\n                                        oneSignalPushFire(1, [result[0].push_token], nt_t_4_ride_start, \"driver is waiting\", {\n                                            \"booking_id\": reqObj.booking_id,\n\n                                            \"booking_status\": bs_start.toString(),\n                                            \"notification_id\": nt_id_4_ride_start\n                                        })\n                                    }\n                                })\n\n\n                        } else {\n                            res.json({\n                                \"status\": \"0\",\n                                \"message\": \"ride start fail\"\n                            })\n                        }\n                    })\n\n            })\n        })\n\n\n    })\n\n    app.post('/api/ride_stop', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"drop_latitude\", \"drop_longitude\", \"toll_tax\", \"ride_location\"], () => {\n                var stopTime = helper.serverYYYYMMDDHHmmss()\n                var rideLocationString = \"\";\n                var rideLocationArr = JSON.parse(reqObj.ride_location);\n                var totalKM = 0;\n\n                rideLocationArr.forEach((locationDetail, index) => {\n                    rideLocationString += '[' + locationDetail.latitude + ',' + locationDetail.longitude + ',' + locationDetail.time + '],';\n                    if (index != 0) {\n                        totalKM += helper.distance(rideLocationArr[index - 1].latitude, rideLocationArr[index - 1].longitude, locationDetail.latitude, locationDetail.longitude)\n                    }\n                })\n\n                helper.Dlog(\"Total KM : \" + totalKM);\n\n                db.query(\"SELECT * FROM `price_detail` AS `pd` \" +\n\n                    \"INNER JOIN `booking_detail` AS `bd` ON `pd`.`price_id` = `bd`.`price_id` \" +\n                    \"INNER JOIN `zone_list` AS `zl` ON `zl`.`zone_id` = `pd`.`zone_id` \" +\n                    \"WHERE `bd`.`booking_id` = ? \", [reqObj.booking_id], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res)\n                            return\n                        }\n\n                        if (result.length > 0) {\n\n                            helper.timeDuration(stopTime, helper.serverMySqlDate(result[0].start_time), (totalMin, durationString) => {\n\n                                if (result[0].mini_km > totalKM) {\n                                    totalKM = parseFloat(result[0].mini_km)\n                                }\n\n                                var amount = parseFloat(result[0].base_charge) + (totalKM * parseFloat(result[0].per_km_charge)) + (totalMin * parseFloat(result[0].per_min_charge)) + parseFloat(result[0].booking_charge);\n\n                                var driverAmount = '0';\n                                var rideCommission = '0';\n\n\n                                if (result[0].mini_fair >= amount) {\n                                    amount = parseFloat(result[0].mini_fair)\n                                }\n\n                                // 110% 1000\n                                var totalAmount = amount * 100 / (100 + parseInt(result[0].tax)) // 1000 * 100 / (100 + 10)\n\n\n                                //10 %\n                                taxAmount = (amount - totalAmount).toFixed(3); // 110% - 100% = 10% amount\n\n                                driverAmount = ((totalAmount - parseFloat(result[0].booking_charge)) * (1 - (rideCommissionVal / 100.0))).toFixed(2)\n\n                                totalAmount += parseFloat(reqObj.toll_tax)\n\n                                rideCommission = parseFloat(totalAmount - driverAmount).toFixed(2)\n\n\n                                db.query(\"UPDATE `booking_detail` AS `bd` \" +\n                                    \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n                                    \"INNER JOIN `user_detail` AS `dd` ON `dd`.`user_id` = `bd`.`driver_id` \" +\n                                    \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n                                    \"INNER JOIN `payment_detail` AS `pd` ON `pd`.`payment_id` = `bd`.`payment_id` \" +\n                                    \"SET `bd`.`booking_status` = ?, `bd`.`toll_tax` = ?, `bd`.`total_distance` = ? , `bd`.`duration` = ?, `pd`.`amt` = ?, `bd`.`drop_lat` = ? , `bd`.`drop_long` = ?, `pd`.`status` = 1 , `pd`.`payment_date` = NOW(), `dd`.`status` = 1, `ud`.`status` = 1, `bd`.`stop_time` = NOW(), `bd`.`taxi_amout` = ?, `pd`.`driver_amt` = ? , `pd`.`tax_amt` = ?, `pd`.`ride_commission` = ?  \" +\n                                    \"WHERE `bd`.`booking_id` = ? AND `bd`.`driver_id` = ?  AND `bd`.`booking_status` < ? \", [\n                                    bs_complete, reqObj.toll_tax, totalKM, durationString, totalAmount, reqObj.drop_latitude, reqObj.drop_longitude, totalAmount, driverAmount, taxAmount, rideCommission, reqObj.booking_id, uObj.user_id, bs_complete\n                                ], (err, result) => {\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res)\n                                        return\n                                    }\n\n                                    if (result.affectedRows > 0) {\n\n                                        bookingInformationDetail(reqObj.booking_id, '2', (status, result) => {\n\n                                            helper.Dlog(\"-------------- ---------------\");\n                                            helper.Dlog(result);\n\n                                            var userSocket = controllerSocketList['us_' + result[0].user_id];\n                                            if (userSocket && controllerIO.sockets.sockets.get(userSocket.socket_id)) {\n                                                var responseObj = {\n                                                    \"status\": \"1\",\n                                                    \"payload\": {\n                                                        \"booking_id\": parseInt(reqObj.booking_id),\n                                                        \"toll_tax\": reqObj.toll_tax,\n                                                        \"tax_amount\": taxAmount,\n                                                        \"amount\": totalAmount,\n                                                        \"duration\": durationString,\n                                                        \"total_distance\": totalKM,\n                                                        \"payment_type\": result[0].payment_type,\n\n                                                        \"booking_status\": bs_complete\n                                                    },\n                                                    \"message\": \"ride stop\"\n                                                }\n\n                                                controllerIO.sockets.sockets.get(userSocket.socket_id).emit(\"ride_stop\", responseObj)\n                                                helper.Dlog(\"-------------- ride_stop socket send ---------------\");\n\n                                            }\n\n                                            oneSignalPushFire(1, [result[0].push_token], nt_t_5_ride_complete, \"Ride Complete\", {\n                                                \"booking_id\": reqObj.booking_id,\n                                                \"toll_tax\": reqObj.toll_tax,\n                                                \"amount\": totalAmount.toString(),\n                                                \"duration\": durationString,\n                                                \"total_distance\": totalKM.toString(),\n                                                \"payment_type\": result[0].payment_type.toString(),\n                                                \"booking_status\": bs_complete.toString(),\n                                                \"notification_id\": nt_id_5_ride_complete\n                                            })\n\n                                            res.json({\n                                                \"status\": \"1\",\n                                                \"payload\": result[0],\n                                                \"message\": \"Ride Complete Successfully\"\n                                            })\n\n                                        })\n\n                                    } else {\n                                        res.json({\n                                            \"status\": \"0\",\n                                            \"message\": msg_fail\n                                        })\n                                    }\n\n                                })\n\n\n                            })\n\n                        } else {\n                            res.json({\n                                \"status\": \"0\",\n                                \"message\": \"ride stop fail\"\n                            })\n                        }\n                    })\n\n            })\n        })\n    })\n\n    app.post('/api/home', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            var userCol = \"`user_id`\"\n            if (uObj.user_type == ut_driver) {\n                userCol = \"`driver_id`\"\n            }\n            db.query(\"SELECT  `bd`.`booking_id`, `bd`.`booking_status`, `bd`.`user_id`, `bd`.`driver_id` FROM `booking_detail` AS `bd` WHERE `bd`.`booking_status` < ? AND `bd`.`booking_status` > ? AND \" + userCol + \" = ? LIMIT 1\", [bs_complete, bs_pending, uObj.user_id], (err, result) => {\n\n                if (err) {\n                    helper.Dlog(err, res);\n                    return\n                }\n\n                if (result.length > 0) {\n\n                    bookingInformationDetail(result[0].booking_id, uObj.user_type, (status, result) => {\n\n                        helper.Dlog(\"---------- Home ------------\")\n                        helper.Dlog(result);\n                        if (status != 0) {\n\n                            res.json(\n                                {\n                                    \"status\": \"1\",\n                                    \"payload\": {\n                                        \"running\": result[0]\n                                    }\n                                }\n                            )\n                        }\n                    })\n\n\n                } else {\n\n                    res.json(\n                        {\n                            \"status\": \"1\",\n                            \"payload\": {\n                                \"running\": {}\n                            }\n                        }\n                    )\n                }\n\n            })\n\n        })\n    })\n\n    app.post('/api/driver_all_ride_list', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query(\n                \"SELECT `bd`.`booking_id`, `bd`.`pickup_address`, `bd`.`drop_address`, `bd`.`pickup_date`, `bd`.`accpet_time`, `bd`.`start_time`, `bd`.`stop_time`, `bd`.`total_distance`, `bd`.`duration`, `bd`.`toll_tax`, `bd`.`tip_amount`, `bd`.`booking_status`, `sd`.`service_name`, (CASE WHEN `sd`.`icon` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' ,`sd`.`icon`  ) ELSE '' END) AS `icon`, `sd`.`color`, `ppd`.`payment_type`, (CASE WHEN `ppd`.`amt` > 0 AND `bd`.`booking_status` = ? THEN `ppd`.`amt` WHEN `ppd`.`amt` > 0 AND `bd`.`booking_status` = ? THEN 0 WHEN `ppd`.`amt` <= 0 THEN 0 ELSE 0 END) AS `amount`, (CASE WHEN `bd`.`booking_status` = 5 THEN `ppd`.`driver_amt` ELSE 0 END ) AS `driver_amt`, (CASE WHEN `bd`.`status` = 5 THEN `ppd`.`ride_commission` ELSE 0 END ) AS `ride_commission`  FROM `booking_detail` AS `bd` \" +\n                \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n                \"INNER JOIN `price_detail` AS `pd` ON `pd`.`price_id` = `bd`.`price_id` \" +\n                \"INNER JOIN `payment_detail` AS `ppd` ON `ppd`.`payment_id` = `bd`.`payment_id` \" +\n                \"WHERE `bd`.`driver_id` = ? AND (`bd`.`booking_status` BETWEEN ? AND ? ) AND `bd`.`status` = ? ORDER BY `bd`.`booking_id` DESC\",\n                [bs_complete, bs_cancel, uObj.user_id, bs_accept, bs_cancel, '1'], (err, result) => {\n\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    } else {\n                        var rTotalAmount = 0;\n\n                        var totalAmount = 0;\n\n                        result.forEach((bookingObj, index) => {\n                            rTotalAmount += parseFloat(bookingObj.amount);\n                            totalAmount += parseFloat(bookingObj.driver_amt);\n                        })\n\n                        res.json({\n                            'status': '1',\n                            \"payload\": {\n                                \"ride_list\": result,\n                                \"driver_total\": totalAmount,\n                                \"total\": rTotalAmount\n                            }\n                        })\n\n                    }\n                }\n\n            )\n        }, ut_driver)\n\n    })\n\n    app.post('/api/user_all_ride_list', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query(\n                \"SELECT `bd`.`booking_id`, `bd`.`pickup_address`, `bd`.`drop_address`, `bd`.`pickup_date`, `bd`.`accpet_time`, `bd`.`start_time`, `bd`.`stop_time`, `bd`.`est_total_distance`, `bd`.`est_duration`, `bd`.`total_distance`, `bd`.`duration`, `bd`.`booking_status`, `sd`.`service_name`, (CASE WHEN `sd`.`icon` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' ,`sd`.`icon`  ) ELSE '' END) AS `icon`, `sd`.`color` FROM `booking_detail` AS `bd` \" +\n                \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n                \"WHERE `bd`.`user_id` = ? AND `bd`.`status` = ? ORDER BY `bd`.`booking_id` DESC\",\n                [uObj.user_id, '1'], (err, result) => {\n\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    } else {\n\n\n                        res.json({\n                            'status': '1',\n                            \"payload\": result,\n\n                        })\n\n                    }\n                }\n\n            )\n        }, ut_user)\n\n    })\n\n    app.post('/api/ride_rating', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"booking_id\", \"rating\", \"comment\"], () => {\n                //User calling this api then save driver rating\n                //Driver Calling this api then save user rating\n                var sql = \"UPDATE `booking_detail` SET `driver_rating` = ?, `driver_comment` = ? WHERE `booking_id` = ? AND `user_id` = ? AND `booking_status`  = ? \";\n\n                if (uObj.user_type == ut_driver) {\n                    sql = \"UPDATE `booking_detail` SET `user_rating` = ?, `user_comment` = ? WHERE `booking_id` = ? AND `driver_id` = ? AND `booking_status`  = ? \";\n                }\n\n                db.query(sql, [reqObj.rating, reqObj.comment, reqObj.booking_id, uObj.user_id, bs_complete], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n                    if (result.affectedRows > 0) {\n                        res.json({\n                            'status': \"1\",\n                            \"message\": \"Thanks for rating\"\n                        })\n                    } else {\n                        res.json({\n                            'status': \"0\",\n                            \"message\": msg_fail\n                        })\n                    }\n                })\n            })\n        })\n    })\n\n    app.post('/api/driver_summary', (req, res) => {\n\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query(\n                \"SELECT `bd`.`booking_id`, `bd`.`driver_id`, `bd`.`pickup_address`, `bd`.`start_time`, `pd`.`amt`, `pd`.`payment_type` FROM `booking_detail` AS `bd` \" +\n                \"INNER JOIN`payment_detail` AS`pd` ON`bd`.`payment_id` = `pd`.`payment_id` AND`bd`.`booking_status` = ? AND`bd`.`driver_id` = ? \" +\n                \"WHERE DATE(`bd`.`start_time`) = CURRENT_DATE()  ;\" +\n\n                \"SELECT `bd`.`booking_id`, `bd`.`driver_id`, `bd`.`pickup_address`, `bd`.`start_time`, `pd`.`amt`, `pd`.`payment_type` FROM `booking_detail` AS `bd` \"+\n                \"INNER JOIN`payment_detail` AS`pd` ON`bd`.`payment_id` = `pd`.`payment_id` AND`bd`.`booking_status` = ? AND`bd`.`driver_id` = ? \" + \n                \"WHERE DATE(`bd`.`start_time`) <= CURRENT_DATE() AND DATE(`bd`.`start_time`) >= DATE_ADD(NOW(), INTERVAL -7 DAY) ;\" +\n                \n                \"SELECT `dt`.`date`, \" + \n                \"SUM( CASE WHEN `bd`.`booking_id` IS NOT NULL THEN 1 ELSE 0 END) AS `trips_count`, \" +\n                \"SUM( CASE WHEN `bd`.`booking_id` IS NOT NULL THEN `pd`.`amt` ELSE 0.0 END) AS `total_amt`, \" +\n                \"SUM( CASE WHEN `bd`.`booking_id` IS NOT NULL AND `pd`.`payment_type` = 1 THEN `pd`.`amt` ELSE 0.0 END) AS `cash_amt`, \" +\n                \"SUM( CASE WHEN `bd`.`booking_id` IS NOT NULL AND `pd`.`payment_type` = 2 THEN `pd`.`amt` ELSE 0.0 END) AS `online_amt` \" +\n                \"FROM `booking_detail` AS `bd` \" + \n                \"INNER JOIN`payment_detail` AS`pd` ON`bd`.`payment_id` = `pd`.`payment_id` AND`bd`.`booking_status` = ? AND`bd`.`driver_id` = ?  \" +\n                \"AND DATE(`bd`.`start_time`) <= CURRENT_DATE() AND DATE(`bd`.`start_time`) >= DATE_ADD(NOW(), INTERVAL -7 DAY)  \" +\n                \"RIGHT JOIN ( \" +\n\n                \"SELECT DATE( DATE_ADD(NOW(), INTERVAL -1 * `C`.`daynum` DAY)) AS `date` FROM ( \" +\n                \"SELECT t *10 + u AS `daynum` FROM ( SELECT 0 AS t UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 ) AS A, \" +\n                \"( SELECT 0 AS u UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 ) AS B \" +\n                \") AS C WHERE C.`daynum` < 7 ORDER BY date \" +\n\n\") AS `dt` ON `dt`.`date` = DATE(`bd`.`start_time`) GROUP BY `dt`.`date`;\"\n                , [bs_complete, uObj.user_id, bs_complete, uObj.user_id, bs_complete, uObj.user_id ], (err, result) => {\n\n                    if(err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n                    totalAmt = 0;\n                    cashAmt = 0;\n                    onlineAmt = 0;\n\n                    result[0].forEach( (obj) => {\n                        totalAmt = totalAmt + parseFloat(obj.amt);\n\n                        if(obj.payment_type == 1) {\n                            //Cash Payment\n                            cashAmt = cashAmt +  parseFloat(obj.amt);\n                        }else{\n                            //Online Payment\n                            onlineAmt = onlineAmt + parseFloat(obj.amt);\n                        }\n\n                    } )\n\n\n                    wTotalAmt = 0;\n                    wCashAmt = 0;\n                    wOnlineAmt = 0;\n\n                    result[1].forEach((obj) => {\n                        wTotalAmt = wTotalAmt + parseFloat(obj.amt);\n\n                        if (obj.payment_type == 1) {\n                            //Cash Payment\n                            wCashAmt = wCashAmt + parseFloat(obj.amt);\n                        } else {\n                            //Online Payment\n                            wOnlineAmt = wOnlineAmt + parseFloat(obj.amt);\n                        }\n\n                    })\n\n                    res.json( {\n                        'status':\"1\",\n                        \"payload\": {\n                            'today' : {\n                                'tips_count': result[0].length,\n                                'total_amt': totalAmt,\n                                'cash_amt': cashAmt,\n                                'online_amt': onlineAmt,\n                                'list': result[0]\n                            },\n                            'week': {\n                                'tips_count': result[1].length,\n                                'total_amt': wTotalAmt,\n                                'cash_amt': wCashAmt,\n                                'online_amt': wOnlineAmt,\n                                'list': result[1],\n                                'chart': result[2],\n                            },\n                            \n                        }\n                    })\n\n                } )\n        }, ut_driver)\n\n    } )\n\n    \n\n}\n\nfunction driverUserWaitingTimeOver(booking_id, time) {\n    var oneTimeCron = setTimeout(function () {\n        removeDriverWaitUser(booking_id)\n    }, time * 1000)\n\n    driverUserWaitingArray['bk_' + booking_id] = oneTimeCron;\n}\n\nfunction removeDriverWaitUser(booking_id) {\n    clearTimeout(driverUserWaitingArray['bk_' + booking_id])\n    delete driverUserWaitingArray['bk_' + booking_id]\n}\n\nfunction checkAccessToken(helperObj, res, callback, requireType = \"\") {\n    helper.Dlog(helperObj.access_token)\n    helper.CheckParameterValid(res, helperObj, [\"access_token\"], () => {\n        db.query('SELECT `user_id`, `name`, `email`, `gender`, `mobile`, `mobile_code`, `auth_token`,  `user_type`, `is_block`,  `image`, `status` FROM `user_detail` WHERE  `auth_token` = ? AND (`status` = ? OR `status` = ?) ', [helperObj.access_token, \"1\", \"2\"], (err, result) => {\n\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n            helper.Dlog(result)\n\n            if (result.length > 0) {\n                if (requireType != \"\") {\n                    if (requireType == result[0].user_type) {\n                        return callback(result[0])\n                    } else {\n                        res.json({ \"status\": \"0\", \"code\": \"404\", \"message\": \"Access denied. Unauthorized user access.\" })\n                    }\n                } else {\n                    return callback(result[0])\n                }\n\n            } else {\n                res.json({ \"status\": \"0\", \"code\": \"404\", \"message\": \"Access denied. Unauthorized user access.\" })\n            }\n        })\n    })\n}\n\nfunction driverNewRequestSend(bookingDetail, callback) {\n    //`bd`.`pickup_lat`, `bd`.`pickup_long`,\n    var latitude = parseFloat(bookingDetail.pickup_lat)\n    var longitude = parseFloat(bookingDetail.pickup_long)\n\n    helper.findNearByLocation(latitude, longitude, 40, (minLat, maxLat, minLng, maxLng) => {\n        var allReadySendRequest = bookingDetail.request_driver_id\n        if (allReadySendRequest == \"\") {\n            allReadySendRequest = \"''\"\n        }\n\n        helper.Dlog(   \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n        \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n        \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n        \"INNER JOIN `zone_wise_cars_service` AS `zwcs` ON `ud`.`car_id` = `zwcs`.`user_car_id` AND `zwcs`.`zone_doc_id` = `zd`.`zone_doc_id` \" +\n        \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \");\n\n        helper.Dlog([bookingDetail.service_id, bookingDetail.price_id, helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"), helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"), helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete]\n    );\n\n        db.query(\n            \"SELECT `ud`.`user_id`, `ud`.`device_source`, `ud`.`push_token`, `ud`.`lati`, `ud`.`longi` FROM `user_detail` AS `ud` \" +\n            \"INNER JOIN `zone_document` AS `zd` ON `zd`.`zone_id` = `ud`.`zone_id` AND `zd`.`service_id` = ? AND FIND_IN_SET(`zd`.`service_id`, `ud`.`select_service_id`) != 0 \" +\n            \"INNER JOIN `price_detail` AS `pm` ON `pm`.`zone_id` = `zd`.`zone_id` AND `pm`.`price_id` = ?  \" +\n            \"INNER JOIN `zone_wise_cars_service` AS `zwcs` ON `ud`.`car_id` = `zwcs`.`user_car_id` AND `zwcs`.`zone_doc_id` = `zd`.`zone_doc_id` \" +\n            \"WHERE `ud`.`user_type` = 2 AND `ud`.`status` >= 1 AND `ud`.`is_request_send` = 0 AND `zwcs`.`expiry_date` >= ? AND `zwcs`.`status` = 1 AND `zwcs`.`service_provide` = 1 AND (`ud`.`lati` BETWEEN \" + minLat + \" AND \" + maxLat + \" ) AND (`ud`.`longi` BETWEEN \" + minLng + \" AND \" + maxLng + \" ) AND `ud`.`user_id` NOT IN (\" + allReadySendRequest + \" ) AND `ud`.`user_id` NOT IN (SELECT `driver_id` FROM `booking_detail` WHERE `pickup_date` BETWEEN ? AND ? AND `booking_status` < ? GROUP BY user_id  );  \", [bookingDetail.service_id, bookingDetail.price_id, helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD\"), helper.serverMySqlDate(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\"), helper.serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC), bs_complete], (err, result) => {\n\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return\n                }\n\n                if (result.length > 0) {\n\n                    result.forEach((driverInfo, index) => {\n                        result[index].distance = helper.distance(latitude, longitude, driverInfo.lati, driverInfo.longi);\n                    });\n\n                    for (var i = 0; i < result.length; i++) {\n                        for (var j = i; j < result.length; j++) {\n                            if (result[i].distance > result[j].distance) {\n                                result.swap(i, j)\n                            }\n                        }\n                    }\n\n                    //Driver List New Request Send Logic\n                    //Driver For only Live Socket\n\n                    for (var i = 0, len = result.length; i < len; i++) {\n\n                        var driverSocket = controllerSocketList['us_' + result[0].user_id];\n                        if (driverSocket && controllerIO.sockets.sockets.get(driverSocket.socket_id)) {\n\n                            //Driver Push Notification Fire Logic\n\n                            driverSendRequestFire(bookingDetail, result[i], true)\n\n                            var response = {\n                                \"status\": \"1\",\n                                \"payload\": [bookingDetail]\n                            }\n\n                            controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"new_ride_request\", response)\n                            return callback(1, bookingDetail);\n\n                        } else {\n                            helper.Dlog(\"driverSocket client not connected\");\n                            helper.Dlog(result[i]);\n                        }\n\n                    }\n\n                    //Driver not live socket then New Request SendNear by first driver only notification\n                    helper.Dlog(\"new request push notification fire\");\n                    driverSendRequestFire(bookingDetail, result[0], true)\n                    return callback(1, bookingDetail)\n\n                } else {\n                    //no Driver Available\n                    helper.Dlog(\" No Driver Available : \" + bookingDetail.accpet_driver_id)\n\n                    if (bookingDetail.accpet_driver_id != undefined && bookingDetail.accpet_driver_id != \"\") {\n                        //Recall Driver Not Driver Found\n                        db.query(\"UPDATE `booking_detail` SET `driver_id` = `accpet_driver_id` WHERE `booking_id` = ? \", [bookingDetail.booking_id], (err, result) => {\n                            if (err) {\n                                helper.ThrowHtmlError(err);\n                                return\n                            }\n\n                            if (result.affectedRows > 0) {\n                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n                            } else {\n                                helper.Dlog(\"Recall Driver Near info not Driver available\")\n                            }\n\n                            return callback(2, \"recall driver not available\")\n                        })\n                    } else {\n                        //New Booking Request\n                        db.query(\"UPDATE `booking_detail` SET `booking_status` = ?, `stop_time` = NOW() WHERE `booking_id` = ?\", [bs_no_driver, bookingDetail.booking_id], (err, result) => {\n\n                            if (err) {\n                                helper.ThrowHtmlError(err);\n                                return\n                            }\n\n                            if (result.affectedRows > 0) {\n                                helper.Dlog(\"Booking Status \" + bs_no_driver);\n                                helper.Dlog(\"Near info not Driver available\")\n                            } else {\n                                helper.Dlog(\"Near info not Driver available\")\n                            }\n\n                            // user ride refund amount\n\n                            return callback(2, \"driver not available\")\n                        })\n                    }\n\n                }\n            }\n        )\n\n    })\n\n    //Driver Api\n\n\n\n}\n\nfunction driverSendRequestFire(bookingDetail, driverDetail, isSendNotification) {\n    var requestToken = helper.createRequestToken()\n    helper.Dlog(\" --------- Request Token Create -------------\");\n\n    bookingDetail.driver_id = driverDetail.user_id;\n    bookingDetail.request_token = requestToken;\n    bookingDetail.request_accpet_time = requestAcceptTime\n\n    var allReadySendRequest = bookingDetail.request_driver_id\n    if (allReadySendRequest == \"\") {\n        allReadySendRequest = driverDetail.user_id.toString()\n\n    } else {\n        allReadySendRequest = allReadySendRequest + ',' + driverDetail.user_id.toString()\n    }\n\n    db.query(\"UPDATE `booking_detail` SET `driver_id` = ?, `request_driver_id` = ? WHERE `booking_id` = ? ; \" +\n        \"UPDATE `user_detail` SET `is_request_send` = ? WHERE `user_id` = ? \", [driverDetail.user_id, allReadySendRequest, bookingDetail.booking_id, '1', driverDetail.user_id], (err, result) => {\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n            helper.Dlog(\" token:- \" + requestToken + \" d_id:-\" + driverDetail.user_id);\n            helper.Dlog(result);\n\n            if (result[0].affectedRows > 0 && result[1].affectedRows > 0) {\n                //DB Update Done\n                helper.Dlog(\"DB Booking detail Update Successfully\")\n\n                // Corn Create Request => Get Feedback (accept, decline, timeout)\n                driverSendRequestTimeOver(bookingDetail.booking_id, bookingDetail.driver_id, requestToken, requestWaitingAcceptTime)\n            } else {\n                //fail\n                helper.Dlog(\"DB Booking detail Update fail\")\n            }\n\n        })\n\n    if (isSendNotification) {\n\n        //`bd`.`drop_lat`, `bd`.`drop_long`, `bd`.`drop_address`, `bd`.`pickup_date`, `bd`.`service_id`, `bd`.`price_id`, `bd`.`payment_id`, `bd`.`est_total_distance`, `bd`.`est_duration`,  `bd`.`created_date`, `bd`.`accpet_time`, `bd`.`start_time`, `bd`.`stop_time`, `bd`.`booking_status`, `bd`.`request_driver_id`, `pd`.`zone_id`, `pd`.`mini_km`, `sd`.`service_name`, `sd`.`color`, `sd`.`icon`, `ud`.`name`, `ud`.`mobile`, `ud`.`mobile_code`, `ud`.`push_token`, (CASE WHEN `ud`.`image` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' , `ud`.`image`  ) ELSE '' END) AS `image`, `ppd`.`amt`, `ppd`.`amt`, `ppd`.`payment_type`\n        // OneSignal Push\n        oneSignalPushFire(ut_driver, [driverDetail.push_token], nt_t_1_new_request, 'pickup location: ' + bookingDetail.pickup_address, {\n            \"booking_id\": bookingDetail.booking_id,\n            \"request_token\": requestToken,\n            \"service_name\": bookingDetail.service_name,\n            \"color\": bookingDetail.color,\n            \"name\": bookingDetail.name,\n            \"pickup_date\": helper.isoDate(helper.serverMySqlDate(bookingDetail.pickup_date)),\n            \"pickup_lat\": bookingDetail.pickup_lat,\n            \"pickup_long\": bookingDetail.pickup_long,\n            \"pickup_date\": helper.isoDate(helper.serverMySqlDate(bookingDetail.pickup_date)),\n            \"drop_lat\": bookingDetail.pickup_lat,\n            \"drop_long\": bookingDetail.pickup_long,\n            \"pickup_address\": bookingDetail.pickup_address,\n            \"drop_address\": bookingDetail.drop_address,\n            \"amt\": bookingDetail.amt,\n            \"payment_type\": bookingDetail.payment_type,\n            \"notification_id\": nt_id_1_new_request,\n\n            \"est_total_distance\": bookingDetail.est_total_distance, \"est_duration\": bookingDetail.est_duration,\n            \"pickup_accpet_time\": bookingDetail.request_accpet_time,\n            \"request_time_out\": helper.serverDateTimeAddMin(bookingDetail.request_accpet_time),\n\n        });\n\n    }\n\n}\n\nfunction driverSendRequestTimeOver(bookingId, driverId, requestToken, time) {\n\n    var oneTimeCron = setTimeout(() => {\n        helper.Dlog(\" -------------- oneTime Cron Request Accept TimeOver(\" + time + \")\");\n        db.query(\"UPDATE `user_detail` SET `is_request_send` = ? WHERE `user_id` = ? \", ['0', driverId], (err, result) => {\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n            if (result.affectedRows > 0) {\n                helper.Dlog(\"Driver id change success : \" + driverId);\n                // Find New Driver And Send Request this booking id\n\n                driverNewRequestSendByBookingID(bookingId);\n\n            } else {\n                helper.Dlog(\"Driver id change fail: \" + driverId);\n            }\n            removeRequestTokenPendingArr(requestToken);\n        })\n    }, time * 1000)\n    requestPendingArray[requestToken] = oneTimeCron;\n\n}\n\nfunction removeRequestTokenPendingArr(token) {\n    clearTimeout(requestPendingArray[token]);\n    delete requestPendingArray[token];\n    helper.Dlog(\"Delete Request Token: \" + token);\n    helper.Dlog(requestPendingArray);\n}\n\nfunction driverNewRequestSendByBookingID(bookingID) {\n    helper.Dlog(\"---------------- Other Driver Request Send Processing -----------------\")\n    db.query(\"SELECT `bd`.`booking_id`, `bd`.`driver_id`, `bd`.`user_id`, `bd`.`pickup_lat`, `bd`.`pickup_long`, `bd`.`pickup_address`, `bd`.`drop_lat`, `bd`.`drop_long`, `bd`.`drop_address`, `bd`.`pickup_date`, `bd`.`service_id`, `bd`.`price_id`, `bd`.`payment_id`, `bd`.`est_total_distance`, `bd`.`est_duration`,  `bd`.`created_date`, `bd`.`accpet_time`, `bd`.`start_time`, `bd`.`stop_time`, `bd`.`booking_status`, `bd`.`request_driver_id`, `pd`.`zone_id`, `pd`.`mini_km`, `sd`.`service_name`, `sd`.`color`, `sd`.`icon`, `ud`.`name`, `ud`.`mobile`, `ud`.`mobile_code`, `ud`.`push_token`, (CASE WHEN `ud`.`image` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' , `ud`.`image`  ) ELSE '' END) AS `image`, `ppd`.`amt`, `ppd`.`driver_amt`, `ppd`.`payment_type` FROM `booking_detail` AS `bd` \" +\n        \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`user_id` \" +\n        \"INNER JOIN `price_detail` AS `pd` ON `pd`.`price_id` = `bd`.`price_id` \" +\n        \"INNER JOIN `payment_detail` AS `ppd` ON `ppd`.`payment_id` = `bd`.`payment_id` \" +\n        \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n        \"WHERE `bd`.`booking_id` = ? AND ( `bd`.`booking_status` = ? OR (`bd`.`booking_status` < ? AND `bd`.`accpet_driver_id` != '')) \",\n\n        [bookingID, bs_pending, bs_start], (err, result) => {\n\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n\n            if (result.length > 0) {\n                driverNewRequestSend(result[0], (status, bookingInfo) => {\n\n                    if (status == 2) {\n\n                        if (result[0].accpet_driver_id == \"\") {\n                            //New Booking Request No Driver Found\n\n                            var userSocket = controllerSocketList['us_' + result[0].user_id];\n                            if (userSocket && controllerIO.sockets.sockets.get(userSocket.socket_id)) {\n\n                                var response = {\n                                    \"status\": \"1\",\n                                    \"payload\": {\n                                        \"booking_id\": bookingID,\n                                        \"booking_status\": bs_no_driver,\n                                    },\n                                    \"message\": \"driver not available\"\n                                }\n\n                                controllerIO.sockets.sockets.get(userSocket.socket_id).emit(\"driver_not_available\", response)\n\n                            }\n\n                        } else {\n                            //Recall Driver Not Found\n\n                            var driverSocket = controllerSocketList['us_' + result[0].accpet_driver_id];\n                            if (driverSocket && controllerIO.sockets.sockets.get(driverSocket.socket_id)) {\n\n                                var response = {\n                                    \"status\": \"1\",\n                                    \"payload\": {\n                                        \"booking_id\": bookingID,\n                                        \"booking_status\": bs_no_driver,\n                                    },\n                                    \"message\": \"Recall driver not available\"\n                                }\n\n                                controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(\"driver_not_available\", response)\n\n                            }\n\n                            db.query(\"SELECT `user_id`, `push_token` FROM `user_detail` WHERE `user_id` = ? \", [bookingInfo.accpet_driver_id], (err, result) => {\n                                if (err) {\n                                    helper.ThrowHtmlError(err)\n                                    return;\n                                }\n\n                                if (result.length > 0) {\n                                    oneSignalPushFire(ut_driver, [result[0].push_token], nt_t_7_drive_no_available, \"Recall driver not available\", {\n\n                                        \"booking_id\": bookingInfo.booking_id,\n                                        \"notification_id\": nt_id_7_drive_no_available,\n                                    })\n                                }\n                            })\n                        }\n\n\n\n                    }\n\n                })\n\n            } else {\n                helper.Dlog(\"Not Booking info get\")\n            }\n\n        })\n}\n\nfunction userRideCancel(booking_id, booking_status, user_id, user_type, isForce, callback) {\n    var rideCancelTime = helper.serverYYYYMMDDHHmmss()\n    var id = \"user_id\"\n    var checkTime = \"accpet_time\"\n    var response = \"\";\n    var isDriverCancel = '0';\n\n    if (user_type == ut_driver) {\n        id = \"driver_id\"\n        checkTime = \"start_time\"\n        isDriverCancel = \"1\"\n    }\n\n    var condition = \"\"\n\n    if (isForce) {\n        condition = \"\"\n    } else {\n        condition = \" AND `bd`.`booking_status` = '\" + booking_status + \"' \";\n    }\n\n    var sql = \"\"\n\n    if (booking_status == bs_go_user || booking_status == bs_wait_user) {\n        sql = \"UPDATE `booking_detail` AS `bd`\" +\n            \"INNER JOIN `user_detail` AS `ud` ON `bd`.`driver_id` = `ud`.`user_id` \" +\n            \"INNER JOIN `user_detail` AS `uud` ON `bd`.`user_id` = `uud`.`user_id` \" +\n            \"SET `bd`.`booking_status` = ?, `bd`.`is_driver_cancel` = ?, `bd`.`stop_time` = NOW(), `ud`.`status` = '1', `uud`.`status` = '1' \" +\n            \"WHERE `bd`.`booking_id` = ? AND `bd`.`\" + id + \"` = ? AND `bd`.`booking_status` <= ? \" + condition;\n    } else {\n        sql = \"UPDATE `booking_detail` AS `bd`\" +\n            \"SET `bd`.`booking_status` = ?, `bd`.`is_driver_cancel` = ?, `bd`.`stop_time` = NOW() \" +\n            \"WHERE `bd`.`booking_id` = ? AND `bd`.`\" + id + \"` = ? AND `bd`.`booking_status` <= ? \" + condition;\n    }\n\n    helper.Dlog(sql);\n    db.query(sql, [bs_cancel, isDriverCancel, booking_id, user_id, isForce ? \"8\" : bs_start], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return\n        }\n\n        if (result.affectedRows > 0) {\n            if (booking_status > bs_pending) {\n                //Accepted\n\n                // Booking Info need\n                //Socket.io  \n                bookingInformation(booking_id, user_type, (status, result) => {\n                    if (status == 1) {\n\n                        // helper.Dlog(result);\n\n                        helper.timeDuration(rideCancelTime, helper.serverMySqlDate(result[0][checkTime]), (totalMin, durationString) => {\n\n                            if (booking_status >= bs_go_user && booking_status <= bs_wait_user) {\n                                // User taking Remove All\n                            }\n\n                            var emit = \"user_cancel_ride\"\n                            var driverSocket;\n                            var notificationType = ut_driver\n                            var noti_message = nt_t_6_ride_cancel\n\n                            if (user_type == 2) {\n                                emit = \"driver_cancel_ride\"\n                                driverSocket = controllerSocketList['us_' + result[0].user_id];\n                                notificationType = ut_user\n                                var noti_message = nt_t_6_ride_cancel\n                            } else {\n                                var driverSocket = controllerSocketList['us_' + result[0].driver_id];\n                            }\n\n                            response = {\n                                'status': \"1\",\n                                \"payload\": {\n                                    \"booking_id\": parseInt(booking_id),\n                                    \"booking_status\": bs_cancel,\n                                },\n                                \"message\": noti_message\n                            }\n\n                            if (driverSocket && controllerIO.sockets.sockets.get(driverSocket.socket_id)) {\n\n                                controllerIO.sockets.sockets.get(driverSocket.socket_id).emit(emit, response)\n                                helper.Dlog(\"Ride Cancel Node Notification send -----\" + emit)\n                            } else {\n                                helper.Dlog(\"Ride Cancel Node Notification User not connect -----\" + emit)\n                            }\n\n                            oneSignalPushFire(notificationType, [result[0].push_token], nt_t_6_ride_cancel, noti_message, {\n                                \"booking_id\": parseInt(booking_id).toString(),\n                                \"booking_status\": bs_cancel.toString(),\n                                \"notification_id\": nt_id_6_ride_cancel\n                            })\n\n                            return callback({\n                                \"status\": \"1\", \"message\": \"Ride Cancel successfully\", \"payload\": {\n                                    \"booking_id\": parseInt(booking_id),\n                                    \"booking_status\": bs_cancel,\n                                }\n                            })\n\n                        })\n\n                    } else {\n                        return callback({\n                            \"status\": \"0\", \"message\": \"ride cancel fail\"\n                        })\n                    }\n                })\n\n\n            } else {\n                //Ride Not Accepted\n                return callback({\n                    \"status\": \"1\", \"message\": \"Ride Cancel successfully\", \"payload\": {\n                        \"booking_id\": parseInt(booking_id),\n                        \"booking_status\": bs_cancel,\n                    }\n                })\n            }\n\n        } else {\n            return callback({\n                \"status\": \"0\",\n                \"message\": \"ride cancel fail\"\n            })\n        }\n    })\n\n}\n\nfunction bookingInformation(booking_id, user_type, callback) {\n    var userId = \"user_id\"\n\n    switch (user_type) {\n        case 1, '1':\n            userId = \"driver_id\"\n            break;\n        case 2, '2':\n            userId = \"user_id\"\n            break;\n        default:\n            userId = \"driver_id\"\n            break;\n    }\n\n    db.query(\"SELECT `bd`.*, `sd`.*, `pd`. *, `pm`.*, `zl`.*, `ud`.`name`, `ud`.`gender`, `uud`.`email`, `ud`.`mobile`, `ud`.`lati`, `ud`.`longi`, `ud`.`user_type`, `ud`.`push_token`, `cs`.`series_name`, `cm`.`model_name`, `cb`.`brand_name`, `ucd`.`car_number`, `pd`.`status` AS `payment_status` FROM `booking_detail`AS `bd` \" +\n\n        \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.`\" + userId + \"` \" +\n        \"INNER JOIN `user_detail` AS `uud` ON `uud`.`user_id` = `bd`.`user_id` \" +\n        \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n        \"INNER JOIN `payment_detail` AS `pd` ON `pd`.`payment_id` = `bd`.`payment_id` \" +\n        \"INNER JOIN `price_detail` AS `pm` ON `pm`.`price_id` = `bd`.`price_id`\" +\n        \"INNER JOIN `zone_list` AS `zl` ON `pm`.`zone_id` = `zl`.`zone_id` \" +\n        \"LEFT JOIN `user_cars` AS `ucd` ON `ucd`.`user_car_id` = `bd`.`user_car_id` \" +\n        \"LEFT JOIN `car_series` AS `cs` ON `cs`.`series_id` = `ucd`.`series_id`  \" +\n        \"LEFT JOIN `car_model` AS `cm` ON `cm`.`model_id` = `cs`.`model_id` \" +\n        \"LEFT JOIN `car_brand` AS `cb`ON `cb`.`brand_id` = `cs`.`brand_id` \" +\n        \"WHERE `bd`.`booking_id` IN (\" + booking_id + \")\", [], (err, result) => {\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n            if (result.length > 0) {\n                return callback(1, result)\n            } else {\n                return callback(0, \"No Booking Information\")\n            }\n\n        });\n\n}\n\nfunction bookingInformationDetail(booking_id, user_type, callback) {\n    var userId = \"`user_id`\"\n    var otp_condition = \"\";\n\n    helper.Dlog(booking_id);\n\n    switch (user_type) {\n        case 2, '2':\n            userId = \"`user_id`\"\n\n            break;\n        default:\n            userId = \"`driver_id`\"\n            otp_condition = \" (CASE WHEN `bd`.`booking_status` <= '\" + bs_wait_user + \"' THEN `bd`.`otp_code` ELSE '-' END ) AS `otp_code`, \";\n            break;\n    }\n\n    var sql = \"SELECT `bd`.`booking_id`, `bd`.`user_id`, `bd`.`pickup_lat`, `bd`.`pickup_long`, `bd`.`pickup_address`, \" + otp_condition + \" `bd`.`drop_lat`, `bd`.`drop_long`, `bd`.`drop_address`, `bd`.`service_id`, `bd`.`price_id`, `bd`.`driver_id`, `bd`.`driver_rating`, `bd`.`driver_comment`, `bd`.`user_rating`, `bd`.`user_comment`, `bd`.`total_distance`, `bd`.`accpet_time`, `bd`.`payment_id` , `bd`.`start_time` ,`bd`.`stop_time` ,`bd`.`duration` ,`bd`.`toll_tax` ,`bd`.`tip_amount` ,`bd`.`booking_status`, `bd`.`est_total_distance`, `bd`.`est_duration`, `pm`.`mini_km`, `ud`.`name`, `ud`.`push_token`, `ud`.`gender`, `ud`.`mobile`, `ud`.`mobile_code`, `ud`.`lati`, `ud`.`longi` , (CASE WHEN `ud`.`image` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' , `ud`.`image`  ) ELSE '' END) AS `image`,  `pd`.`payment_type`,   `pd`.`amt`,   `pd`.`payment_date`,   `pd`.`tax_amt`,  `pd`.`pay_amt`,  `pd`.`pay_card_amt`,  `pd`.`driver_amt`,  `pd`.`pay_wallet_amt`, `pd`.`status` AS `user_payment_status`, `sd`.`service_name`, `sd`.`color`, (CASE WHEN `sd`.`top_icon` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' , `sd`.`top_icon`  ) ELSE '' END) AS `top_icon`, (CASE WHEN `sd`.`icon` != ''  THEN CONCAT( '\" + helper.ImagePath() + \"' ,`sd`.`icon`  ) ELSE '' END) AS `icon`,  `cs`.`series_name`, `cm`.`model_name`, `cb`.`brand_name`, `ucd`.`car_number`, `pd`.`status` AS `payment_status` FROM `booking_detail`AS `bd` \" +\n\n        \"INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `bd`.\" + userId +\n        \" INNER JOIN `user_detail` AS `uud` ON `uud`.`user_id` = `bd`.`user_id` \" +\n        \"INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `bd`.`service_id` \" +\n        \"INNER JOIN `payment_detail` AS `pd` ON `pd`.`payment_id` = `bd`.`payment_id` \" +\n        \"INNER JOIN `price_detail` AS `pm` ON `pm`.`price_id` = `bd`.`price_id`\" +\n        \"INNER JOIN `zone_list` AS `zl` ON `pm`.`zone_id` = `zl`.`zone_id` \" +\n        \"LEFT JOIN `user_cars` AS `ucd` ON `ucd`.`user_car_id` = `bd`.`user_car_id` \" +\n        \"LEFT JOIN `car_series` AS `cs` ON `cs`.`series_id` = `ucd`.`series_id`  \" +\n        \"LEFT JOIN `car_model` AS `cm` ON `cm`.`model_id` = `cs`.`model_id` \" +\n        \"LEFT JOIN `car_brand` AS `cb`ON `cb`.`brand_id` = `cs`.`brand_id` \" +\n        \"WHERE `bd`.`booking_id`  = ? GROUP BY `bd`.`booking_id`\";\n\n\n    helper.Dlog(\n        sql\n\n    )\n\n    db.query(sql, [booking_id], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return\n        }\n\n        if (result.length > 0) {\n            return callback(1, result)\n        } else {\n            return callback(0, \"No Booking Information\")\n        }\n\n    });\n\n}\n\nfunction oneSignalPushFire(userType, token, title, message, messageDate = {}) {\n\n}"
        }
    ]
}