{
    "sourceFile": "controllers/cars_controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1725522378427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1725522378427,
            "name": "Commit-0",
            "content": "var db = require('./../helpers/db_helpers')\nvar helper = require('./../helpers/helpers')\nvar multiparty = require('multiparty')\nvar fs = require('fs');\nvar imageSavePath = \"./public/img/\"\n\n//User Type:\nconst ut_admin = 4\nconst ut_driver = 2\nconst ut_user = 1\n\nmodule.exports.controller = (app, io, socket_list) => {\n\n    const msg_success = \"successfully\";\n    const msg_fail = \"fail\";\n    const msg_invalidUser = \"invalid username\";\n\n    app.post('/api/add_car', (req, res) => {\n\n        var form = new multiparty.Form();\n        form.parse(req, (err, reqObj, files) => {\n            if (err) {\n                helper.ThrowHtmlError(err, res);\n                return;\n            }\n\n            checkAccessToken(req.headers, res, (uObj) => {\n                helper.CheckParameterValid(res, reqObj, [\"brand\", \"model\", \"series\", \"seat\", \"other_status\", \"car_number\"], () => {\n\n                    helper.CheckParameterValid(res, files, [\"image\"], () => {\n\n                        var responseObj = { \"status\": \"0\", \"message\": \"Car add fail\" };\n\n                        switch (reqObj.other_status.toString()) {\n                            case \"0\":\n                                user_car_add(uObj.user_id, reqObj.series[0], reqObj.car_number[0], files.image[0], (resObj) => {\n                                    res.json(resObj);\n                                })\n                                break;\n                            case \"1\":\n                                // new brand, new model, new series add\n                                car_brand_add(reqObj.brand[0], (brand_id) => {\n                                    car_model_add(brand_id, reqObj.model[0], reqObj.seat[0], (model_id) => {\n                                        car_series_add(brand_id, model_id, reqObj.series[0], (series_id) => {\n                                            user_car_add(uObj.user_id, series_id, reqObj.car_number[0], files.image[0], (resObj) => {\n                                                res.json(resObj);\n                                            })\n                                        })\n                                    })\n                                })\n                                break;\n                            case \"2\":\n                                // exits brand, new model, new series add\n\n                                car_model_add(reqObj.brand[0], reqObj.model[0], reqObj.seat[0], (model_id) => {\n                                    car_series_add(reqObj.brand, model_id, reqObj.series[0], (series_id) => {\n                                        user_car_add(uObj.user_id, series_id, reqObj.car_number[0], files.image[0], (resObj) => {\n                                            res.json(resObj);\n                                        })\n                                    })\n                                })\n\n                                break;\n\n                            case \"3\":\n                                // exits brand, exits model, new series add\n                                car_series_add(reqObj.brand[0], reqObj.model[0], reqObj.series[0], (series_id) => {\n                                    user_car_add(uObj.user_id, series_id, reqObj.car_number[0], files.image[0], (resObj) => {\n                                        res.json(resObj);\n                                    })\n                                })\n                                break;\n\n                            default:\n                                break;\n                        }\n\n                    })\n                })\n\n            }, \"2\")\n\n        })\n\n    })\n\n    app.post('/api/car_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n\n            db.query('SELECT  `uc`.`user_car_id`, `cs`.`series_name`, `cm`.`model_name`, `cb`.`brand_name`, `uc`.`car_number`, (CASE WHEN `uc`.`car_image` != \"\"  THEN CONCAT( \"' + helper.ImagePath() + '\" , `uc`.`car_image`  ) ELSE \"\" END) AS `car_image`, `uc`.`status`, `sd`.`service_name`, `sd`.`service_id`, `ud`.`select_service_id`, IFNULL(`zwcs`.`status`, 0) AS `service_status`,  (CASE WHEN `uc`.`user_car_id` = `ud`.`car_id` THEN 1 ELSE 0 END) AS `is_set_running`  FROM `user_cars` AS `uc` ' +\n                'INNER JOIN `car_series` AS `cs` ON  `uc`.`series_id` = `cs`.`series_id` ' +\n                'INNER JOIN `car_model` AS `cm` ON  `cm`.`model_id` = `cm`.`model_id` ' +\n                'INNER JOIN `car_brand` AS `cb` ON `cb`.`brand_id` = `cm`.`brand_id`  ' +\n                'INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `uc`.`user_id` ' +\n                'INNER JOIN `zone_document` AS `zwd` ON `zwd`.`zone_id` = `ud`.`zone_id` AND `zwd`.`status` = 1 ' +\n                'INNER JOIN `service_detail` AS `sd` ON `sd`.`service_id` = `zwd`.`service_id` ' +\n                'LEFT JOIN  `zone_wise_cars_service` AS  `zwcs` ON `zwcs`.`user_car_id` = `uc`.`user_car_id` AND `zwd`.`zone_doc_id` = `zwcs`.`zone_doc_id` '\n                + ' WHERE  `uc`.`user_id` = ? AND `uc`.`status` != ? GROUP BY `uc`.`user_car_id`, `sd`.`service_id` ORDER BY `uc`.`user_car_id`  ', [uObj.user_id, 2], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n\n                    if (result.length > 0) {\n\n                        var car_list = [];\n                        var car_index = 0;\n\n                        result.forEach((carDetail, index) => {\n\n                            helper.Dlog(carDetail);\n\n                            if (carDetail.series_name == \"\") {\n                                result[index].series_name = \"-\"\n                            }\n\n                            if (index == 0) {\n                                car_list.push(carDetail);\n                                car_list[car_index].active_status = 1;\n                                car_list[car_index].service_missing_name = \"\";\n                            } else if (carDetail.user_car_id != car_list[car_index].user_car_id) {\n                                car_list[car_index].service_missing_name = car_list[car_index].service_missing_name.replace(/,\\s*$/, \"\")\n                                car_list.push(carDetail);\n                                car_index++;\n                                car_list[car_index].active_status = 1;\n                                car_list[car_index].service_missing_name = \"\";\n                            }\n\n                            if (carDetail.select_service_id != \"\") {\n                                carDetail.select_service_id.split(\",\").forEach((series_id) => {\n                                    if (carDetail.service_status == 0 && series_id == carDetail.series_id) {\n                                        car_list[car_index].service_missing_name += carDetail.series_name + \",\"\n                                        car_list[car_index].active_status = 0\n                                    }\n                                })\n                            }\n                            delete car_list[car_index][\"service_name\"]\n                            delete car_list[car_index][\"service_status\"]\n\n                        });\n                        car_list[car_index].service_missing_name = car_list[car_index].service_missing_name.replace(/,\\s*$/, \"\")\n\n                        res.json({ \"status\": \"1\", \"payload\": car_list })\n\n                    } else {\n                        res.json({ \"status\": \"0\", \"message\": \"no car\" })\n                    }\n                })\n\n\n        }, \"2\")\n\n    })\n\n    app.post('/api/car_delete', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"user_car_id\"], () => {\n                db.query('UPDATE  `user_cars` SET `status` = ? WHERE `user_car_id` = ? AND `user_id` = ? ', [2, reqObj.user_car_id, uObj.user_id], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                        return\n                    }\n\n                    if (result.affectedRows > 0) {\n                        res.json({ \"status\": \"1\", \"message\": \"car deleted succfully\" })\n\n                    } else {\n                        res.json({ \"status\": \"0\", \"message\": msg_fail })\n                    }\n                })\n            })\n        }, \"2\")\n    })\n\n    app.post('/api/set_running_car', (req, res) => {\n        helper.Dlog(req.body);\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"user_car_id\"], () => {\n                db.query('UPDATE `user_cars` AS `ucd` ' +\n                    \"INNER JOIN `user_detail` AS `ud` ON `ucd`.`user_id` = `ud`.`user_id` \" +\n                    \"INNER JOIN `car_series` AS `cs` ON `cs`.`series_id` = `ucd`.`series_id` \" +\n                    \"INNER JOIN `car_model` AS `cm` ON `cs`.`model_id` = `cm`.`model_id` \" +\n                    \"INNER JOIN `car_brand` AS  `cb` ON `cb`.`brand_id` = `cs`.`brand_id` \" +\n                    \"SET `ud`.`car_id` = `ucd`.`user_car_id`, `ud`.`seat` = `cm`.`seat` \" +\n                    \"WHERE `ucd`.`user_car_id` = ? AND `ucd`.`user_id` = ? AND `ucd`.`status` = ?\", [reqObj.user_car_id, uObj.user_id, 1], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n\n                        if (result.affectedRows > 0) {\n\n                            db.query('SELECT  `uc`.`user_car_id`, `cs`.`series_name`, `cm`.`model_name`, `cb`.`brand_name`, `uc`.`car_number`,  (CASE WHEN `uc`.`car_image` != \"\"  THEN CONCAT( \"' + helper.ImagePath() + '\" , `uc`.`car_image`  ) ELSE \"\" END) AS `car_image`, `uc`.`status`,(CASE WHEN `uc`.`user_car_id` = `ud`.`car_id` THEN 1 ELSE 0 END) AS `is_set_running`  FROM `user_cars` AS `uc` ' +\n                                'INNER JOIN `car_series` AS `cs` ON  `uc`.`series_id` = `cs`.`series_id` ' +\n                                'INNER JOIN `car_model` AS `cm` ON  `cm`.`model_id` = `cm`.`model_id` ' +\n                                'INNER JOIN `car_brand` AS `cb` ON `cb`.`brand_id` = `cm`.`brand_id`  ' +\n                                'INNER JOIN `user_detail` AS `ud` ON `ud`.`user_id` = `uc`.`user_id` ' +\n                                \"WHERE `uc`.`user_car_id` = ? AND `uc`.`status` = ? \", [reqObj.user_car_id, 1], (err, result) => {\n\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res);\n                                        return\n                                    }\n\n                                    if (result.length > 0) {\n                                        result.forEach((serObj, index) => {\n                                            if (serObj.series_name == \"\") {\n                                                result[index].series_name = \"-\"\n                                            }\n                                        });\n                                        res.json({ \"status\": \"1\", \"payload\": result, \"message\": \"car set running succfully\" })\n                                    } else {\n                                        res.json({ \"status\": \"0\", \"message\": msg_fail })\n                                    }\n                                })\n\n\n\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n            })\n        }, \"2\")\n    })\n\n    app.post('/api/brand_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query('SELECT `brand_id`, `brand_name` FROM `car_brand` WHERE `status` != ?', [2], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err, res);\n                    return\n                }\n\n                var other_dict = { 'brand_id': 0, 'brand_name': \"Other\" };\n\n                if (result.length > 0) {\n                    result.push(other_dict)\n                    res.json({ \"status\": \"1\", \"payload\": result })\n\n                } else {\n                    res.json({ \"status\": \"1\", \"payload\": [other_dict] })\n                }\n            })\n        })\n\n    })\n\n    app.post('/api/model_list', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"brand_id\"], () => {\n                db.query('SELECT `cm`.`model_id`, `cm`.`model_name`, `cm`.`seat` FROM `car_model` AS `cm` ' +\n                    'INNER JOIN `car_brand` AS `cb` ON `cb`.`brand_id` = `cm`.`brand_id` AND `cm`.`brand_id` = ?  '\n                    + ' WHERE  `cm`.`status` != ?', [reqObj.brand_id, 2], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n                        var other_dict = { 'model_id': 0, 'model_name': \"Other\", \"seat\": \"0\" };\n                        if (result.length > 0) {\n                            result.push(other_dict)\n                            res.json({ \"status\": \"1\", \"payload\": result })\n\n                        } else {\n                            res.json({ \"status\": \"1\", \"payload\": [other_dict] })\n                        }\n                    })\n            })\n\n        })\n\n    })\n\n    app.post('/api/series_list', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n\n            helper.CheckParameterValid(res, reqObj, [\"model_id\"], () => {\n                db.query('SELECT  `cs`.`series_id`, `cs`.`series_name` FROM `car_series` AS `cs` ' +\n                    'INNER JOIN `car_model` AS `cm` ON `cm`.`model_id` = `cs`.`model_id`  AND `cs`.`model_id` = ?  ' +\n\n                    ' WHERE `cs`.`status` != ?', [reqObj.model_id, 2], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n                        var other_dict = { 'series_id': 0, 'series_name': \"Other\" };\n                        if (result.length > 0) {\n\n                            result.forEach((serObj, index) => {\n                                if (serObj.series_name == \"\") {\n                                    result[index].series_name = \"-\"\n                                }\n                            });\n                            result.push(other_dict)\n                            res.json({ \"status\": \"1\", \"payload\": result })\n\n                        } else {\n                            res.json({ \"status\": \"1\", \"payload\": [other_dict] })\n                        }\n                    })\n            })\n        })\n\n    })\n\n    app.post('/api/subscription_plan_list', (req, res) => {\n        helper.Dlog(req.body)\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query(\" SELECT `sp`.`plan_id`, `sp`.`plan_name`,`sp`.`detail`, `sp`.`days`, `sp`.`amount`,`sp`.`max_discount`,`sp`.`max_ride`, `sp`.`zone_id`, `sp`.`service_id`, `sp`.`min_amount`, `sp`.`discount_per`, `sp`.`image`, `sb`.`user_typ`, `sp`.`start_date`, `sp`.`end_date`, `sp`.`created_date`, `zl`.`zone_name`, GROUP_CONCAT(`sp`.`service_name`) AS `service_name`     FROM `subscription_plan` AS `sp` \" +\n            \"INNER JOIN `zone_list` AS  `zl` ON `zl`.`zone_id` = `sp`.`zone_id` \" +\n            \"INNER JOIN `service_detail` AS `sd` ON FIND_IN_SET(`sd`.`service_id`, `sp`.`service_id` ) != 0 AND `sd`.`status` = 1  \" +\n            \"WHERE `sp`.`status` = 1 AND `sp`.`start_date` >= NOW() AND `sp`.`end_date` <= NOW() GROUP BY `sp`.`plan_id` \", [], (err, result) => {\n                if(err) {\n                    helper.ThrowHtmlError(err, res);\n                    return\n                }\n\n                res.json(\n                    {\n                        \"status\": \"1\",\n                        \"payload\": result\n                    }\n                )\n            }  )\n        } )\n    } )\n\n    app.post('/api/admin/add_car', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"brand\", \"model\", \"series\", \"seat\", \"other_status\"], () => {\n\n                var responseObj = { \"status\": \"0\", \"message\": \"Car add fail\" };\n\n                switch (reqObj.other_status.toString()) {\n                    case \"0\":\n                        res.json({ \"status\": \"1\", \"message\": msg_success })\n                        break;\n                    case \"1\":\n                        // new brand, new model, new series add\n                        car_brand_add(reqObj.brand, (brand_id) => {\n                            car_model_add(brand_id, reqObj.model, reqObj.seat, (model_id) => {\n                                car_series_add(brand_id, model_id, reqObj.series, (series_id) => {\n                                    res.json({ \"status\": \"1\", \"message\": msg_success })\n                                })\n                            })\n                        })\n                        break;\n                    case \"2\":\n                        // exits brand, new model, new series add\n\n                        car_model_add(reqObj.brand, reqObj.model, reqObj.seat, (model_id) => {\n                            car_series_add(reqObj.brand, model_id, reqObj.series, (series_id) => {\n                                res.json({ \"status\": \"1\", \"message\": msg_success })\n                            })\n                        })\n\n                        break;\n\n                    case \"2\":\n                        // exits brand, exits model, new series add\n                        car_series_add(reqObj.brand, reqObj.model, reqObj.series, (series_id) => {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        })\n                        break;\n\n                    default:\n                        break;\n                }\n\n            })\n\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/brand_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query('SELECT `brand_id`, `brand_name`, `status`, `created_date`, `modify_date` FROM `car_brand` WHERE `status` != ?', [2], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return\n                }\n\n                if (result.length > 0) {\n                    res.json({ \"status\": \"1\", \"payload\": result })\n\n                } else {\n                    res.json({ \"status\": \"0\", \"message\": \"no brand added\" })\n                }\n            })\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/model_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query('SELECT `cm`.`model_id`, `cb`.`brand_name`, `cm`.`brand_id`, `cm`.`model_name`, `cm`.`seat`, `cm`.`status`, `cm`.`created_date`, `cm`.`modify_date` FROM `car_model` AS `cm` ' +\n                'INNER JOIN `car_brand` AS `cb` ON `cb`.`brand_id` = `cm`.`brand_id` '\n                + ' WHERE `cm`.`status` != ?', [2], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err);\n                        return\n                    }\n                    if (result.length > 0) {\n                        res.json({ \"status\": \"1\", \"payload\": result })\n\n                    } else {\n                        res.json({ \"status\": \"0\", \"message\": \"no brand added\" })\n                    }\n                })\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/series_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n            db.query('SELECT `cm`.`model_id`, `cm`.`model_name`, `cb`.`brand_name`, `cm`.`brand_id`, `cs`.`series_id`,  `cs`.`series_name`, `cs`.`status`, `cs`.`created_date`, `cs`.`modify_date` FROM `car_series` AS `cs` ' +\n                'INNER JOIN `car_model` AS `cm` ON `cm`.`model_id` = `cs`.`model_id` ' +\n                'INNER JOIN `car_brand` AS `cb` ON `cb`.`brand_id` = `cs`.`brand_id` ' +\n                ' WHERE `cs`.`status` != ?', [2], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err);\n                        return\n                    }\n                    if (result.length > 0) {\n                        result.forEach((serObj, index) => {\n                            if (serObj.series_name == \"\") {\n                                result[index].series_name = \"-\"\n                            }\n                        });\n                        res.json({ \"status\": \"1\", \"payload\": result })\n\n                    } else {\n                        res.json({ \"status\": \"0\", \"message\": \"no brand added\" })\n                    }\n                })\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/brand_approved', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"brand_id\"], () => {\n\n                db.query('UPDATE `car_brand` AS `cb` ' +\n\n                    'SET `cb`.`modify_date` = NOW(), `cb`.`status` = (CASE WHEN `cb`.`status` = 0 THEN 1 ELSE 0 END) ' +\n\n                    ' WHERE `cb`.`brand_id` = ? AND `cb`.`status` != ? ', [reqObj.brand_id, 2], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                        }\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n            })\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/model_approved', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"model_id\"], () => {\n\n                db.query('UPDATE `car_model` AS `cm` ' +\n                    'INNER JOIN `car_brand` AS `cb` ON `cm`.`brand_id` = `cb`.`brand_id` ' +\n                    'SET `cb`.`modify_date` = NOW(), `cb`.`status` = (CASE WHEN `cb`.`status` = 0 THEN 1 ELSE 0 END), `cm`.`modify_date` = NOW(), `cm`.`status` = (CASE WHEN `cm`.`status` = 0 THEN 1 ELSE 0 END) ' +\n\n                    ' WHERE `cm`.`model_id` = ? AND `cm`.`status` != ? ', [reqObj.model_id, 2], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n                        helper.Dlog(result);\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n            })\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/series_approved', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"series_id\"], () => {\n\n                db.query('UPDATE `car_series` AS `cs` ' +\n                    'INNER JOIN `car_model` AS `cm` ON `cm`.`model_id` = `cs`.`model_id` ' +\n                    'INNER JOIN `car_brand` AS `cb` ON `cs`.`brand_id` = `cb`.`brand_id` ' +\n                    'SET `cb`.`modify_date` = NOW(), `cb`.`status` = (CASE WHEN `cb`.`status` = 0 THEN 1 ELSE 0 END), `cm`.`modify_date` = NOW(), `cm`.`status` = (CASE WHEN `cm`.`status` = 0 THEN 1 ELSE 0 END), `cs`.`modify_date` = NOW(), `cs`.`status` = (CASE WHEN `cs`.`status` = 0 THEN 1 ELSE 0 END) ' +\n\n                    ' WHERE `cs`.`series_id` = ? AND `cs`.`status` != ? ', [reqObj.series_id, 2], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                        }\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n            })\n        }, \"4\")\n\n    })\n\n\n    app.post('/api/admin/brand_delete', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"brand_id\"], () => {\n\n                db.query('UPDATE `car_brand` AS `cb` ' +\n                    'LEFT JOIN `car_model` AS `cm` ON `cb`.`brand_id` = `cm`.`brand_id` ' +\n                    'LEFT JOIN `car_series` AS `cs` ON `cs`.`model_id` = `cm`.`model_id` ' +\n                    'SET `cm`.`modify_date` = NOW(), `cm`.`status` = 2,' +\n                    '`cb`.`modify_date` = NOW(), `cb`.`status` = 2, ' +\n                    '`cs`.`modify_date` = NOW(), `cs`.`status` = 2 ' +\n                    ' WHERE `cb`.`brand_id` = ? ', [reqObj.brand_id], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                        }\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n\n\n            })\n\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/model_delete', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"model_id\"], () => {\n\n                db.query('UPDATE `car_model` AS `cm` ' +\n                    'LEFT JOIN `car_series` AS `cs` ON `cs`.`model_id` = `cm`.`model_id` ' +\n                    'SET `cm`.`modify_date` = NOW(), `cm`.`status` = 2, `cs`.`modify_date` = NOW(), `cs`.`status` = 2 ' +\n                    ' WHERE `cm`.`model_id` = ? ', [reqObj.model_id], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return;\n                        }\n                        \n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n\n\n            })\n\n        }, \"4\")\n\n    })\n\n    app.post('/api/admin/series_delete', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n        checkAccessToken(req.headers, res, (uObj) => {\n            helper.CheckParameterValid(res, reqObj, [\"series_id\"], () => {\n\n                db.query('UPDATE `car_series` AS `cs` SET `cs`.`modify_date` = NOW(), `cs`.`status` = 2 ' +\n                    ' WHERE `cs`.`series_id` = ? ', [reqObj.series_id], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                        }\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": msg_success })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n\n\n            })\n\n        }, \"4\")\n\n    })\n\n\n    app.post('/api/admin/add_subscription_plan', (req, res) => {\n\n        var form = new multiparty.Form();\n        form.parse(req, (err, reqObj, files) => {\n            if (err) {\n                helper.ThrowHtmlError(err, res);\n                return;\n            }\n\n            checkAccessToken(req.headers, res, (uObj) => {\n                helper.CheckParameterValid(res, reqObj, [\"plan_name\", \"plan_details\", \"user_type\", \"days\", \"zone_id\", \"service_id\", \"min_amount\", \"max_ride\", \"max_discount\", \"discount_per\", \"amount\", \"start_date\", \"end_date\"], () => {\n\n                    helper.CheckParameterValid(res, files, [\"image\"], () => {\n\n                        var extension = files.image[0].originalFilename.substring(files.image[0].originalFilename.lastIndexOf(\".\") + 1);\n                        var imageFileName = \"subscription_plan/\" + helper.fileNameGenerate(extension);\n\n                        var newPath = imageSavePath + imageFileName;\n\n                        fs.rename(files.image[0].path, newPath, (err) => {\n\n                            if (err) {\n                                helper.ThrowHtmlError(err);\n                                return;\n                            } else {\n                                db.query(\"INSERT INTO `subscription_plan`( `plan_name`, `detail`, `days`, `amount`, `max_discount`, `max_ride`, `zone_id`, `service_id`, `min_amount`, `discount_per`, `image`, `user_type`, `start_date`, `end_date`) VALUES (?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,? )\", [\n                                    reqObj.plan_name[0], reqObj.plan_details[0], reqObj.days[0], reqObj.amount[0], reqObj.max_discount[0], reqObj.max_ride[0], reqObj.zone_id[0], reqObj.service_id[0], reqObj.min_amount[0], reqObj.discount_per[0], imageFileName, reqObj.user_type[0], reqObj.start_date[0], reqObj.end_date[0],\n                                ], (err, result) => {\n                                    if (err) {\n                                        helper.ThrowHtmlError(err, res);\n                                        return\n                                    }\n\n                                    if (result) {\n                                        res.json({ \"status\": \"1\", \"message\": \"subscription plan added successfully\" })\n                                    } else {\n                                        res.json({ \"status\": \"0\", \"message\": msg_fail })\n                                    }\n                                })\n\n                            }\n                        })\n\n                    })\n                })\n\n            }, ut_admin)\n\n        })\n\n    })\n\n    app.post('/api/admin/edit_subscription_plan', (req, res) => {\n\n        var form = new multiparty.Form();\n        form.parse(req, (err, reqObj, files) => {\n            if (err) {\n                helper.ThrowHtmlError(err, res);\n                return;\n            }\n\n            checkAccessToken(req.headers, res, (uObj) => {\n                helper.CheckParameterValid(res, reqObj, [\"plan_id\", \"plan_name\", \"plan_details\", \"user_type\", \"days\", \"zone_id\", \"service_id\", \"min_amount\", \"max_ride\", \"max_discount\", \"discount_per\", \"amount\", \"start_date\", \"end_date\"], () => {\n\n\n                    var condition = \"\"\n\n                    if (files.image) {\n                        var extension = files.image[0].originalFilename.substring(files.image[0].originalFilename.lastIndexOf(\".\") + 1);\n                        var imageFileName = \"subscription_plan/\" + helper.fileNameGenerate(extension);\n\n                        var newPath = imageSavePath + imageFileName;\n                        condition = \" `image ` = ? '\" + imageFileName + \"' , \"\n                        fs.rename(files.image[0].path, newPath, (err) => {\n\n                            if (err) {\n                                helper.ThrowHtmlError(err);\n                                return;\n                            }\n                        })\n                    }\n\n                    db.query(\"UPDATE `subscription_plan` SET `plan_name` = ?, `detail`= ?, `days`= ?, `amount`= ?, `max_discount`= ?, `max_ride`= ?, `zone_id`= ?, `service_id`= ?, `min_amount`= ?, `discount_per`= ?, \" + condition + \" `user_type` = ? , `start_date` = ?, `end_date` = ? WHERE `plan_id` = ? AND `start_date` > NOW() \", [\n                        reqObj.plan_name[0], reqObj.plan_details[0], reqObj.days[0], reqObj.amount[0], reqObj.max_discount[0], reqObj.max_ride[0], reqObj.zone_id[0], reqObj.service_id[0], reqObj.min_amount[0], reqObj.discount_per[0], imageFileName, reqObj.user_type[0], reqObj.start_date[0], reqObj.end_date[0], reqObj.plan_id[0]\n                    ], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": \"subscription plan update successfully\" })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n\n                })\n\n\n            }, ut_admin)\n\n        })\n\n    })\n\n    app.post('/api/admin/delete_subscription_plan', (req, res) => {\n        helper.Dlog(req.body)\n        var reqObj = req.body;\n\n            checkAccessToken(req.headers, res, (uObj) => {\n                helper.CheckParameterValid(res, reqObj, [\"plan_id\"], () => {\n\n                    db.query(\"UPDATE `subscription_plan` SET `status` = ?, `modify_date`= ? WHERE `plan_id` = ? \", [\n                        reqObj.plan_id\n                    ], (err, result) => {\n                        if (err) {\n                            helper.ThrowHtmlError(err, res);\n                            return\n                        }\n                        if (result.affectedRows > 0) {\n                            res.json({ \"status\": \"1\", \"message\": \"subscription plan deleted successfully\" })\n                        } else {\n                            res.json({ \"status\": \"0\", \"message\": msg_fail })\n                        }\n                    })\n\n                })\n            }, ut_admin)\n    })\n\n    app.post('/api/admin/subscription_plan_list', (req, res) => {\n        checkAccessToken(req.headers, res, (uObj) => {\n\n            db.query(\"SELECT `sp`.`plan_id`, `sp`.`plan_name`, `sp`.`detail`, `sp`.`days`, `sp`.`amount`, `sp`.`max_discount`, `sp`.`max_ride`, `sp`.`zone_id`, `sp`.`service_id`, `sp`.`min_amount`, `sp`.`discount_per`, `sp`.`image`, `sp`.`user_type`, `sp`.`start_date`, `sp`.`end_date`, `sp`.`status`, `sp`.`created_date`, `sp`.`modify_date`, GROUP_CONCAT(`sd`.`service_name` ) AS `service_name`, `zl`.`zone_name` FROM `subscription_plan` AS `sp` \" +\n                \"INNER JOIN`zone_list` AS`zl` ON`zl`.`zone_id` = `sp`.`zone_id` \" +\n                \"INNER JOIn`service_detail` AS`sd` ON FIND_IN_SET(`sd`, `service_id`, `sp`.`service_id`) != 0 AND`sd`.`status` = 1 \" +\n                \"WHERE`sp`.`status` != 2 AND`sp`.`user_type` = 1 GROUP BY`sp`.`plan_id` ORDER BY`sp`.`plan_id` DESC;\" +\n                \"SELECT `service_id`, `service_name` FROM `service_detail` WHERE `status` != 2 ;\" +\n                \"SELECT `zone_id`, `zone_name` FROM `zone_list` WHERE `status` != 2;\", [], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err, res);\n                    }\n                    res.json({\n                        \"status\": \"1\", \"payload\": {\n                            \"subscription_plan\": result[0],\n                            \"service_list\": result[1],\n                            \"zone_list\": result[2]\n                        }\n                    })\n                })\n        }, ut_admin)\n\n    })\n\n    app.post('/api/upload_image', (req, res) => {\n        var form = new multiparty.Form();\n        form.parse(req, (err, reqObj, files) => {\n            if (err) {\n                helper.ThrowHtmlError(err, res);\n                return;\n            }\n\n            helper.Dlog(\"--------------- Parameter --------------\")\n            helper.Dlog(reqObj);\n\n            helper.Dlog(\"--------------- Files --------------\")\n            helper.Dlog(files);\n\n            if (files.image != undefined || files.image != null) {\n                var extension = files.image[0].originalFilename.substring(files.image[0].originalFilename.lastIndexOf(\".\") + 1);\n                var imageFileName = helper.fileNameGenerate(extension);\n\n                var newPath = imageSavePath + imageFileName;\n\n                fs.rename(files.image[0].path, newPath, (err) => {\n\n                    if (err) {\n                        helper.ThrowHtmlError(err);\n                        return;\n                    } else {\n\n                        var name = reqObj.name;\n                        var address = reqObj.address;\n\n                        helper.Dlog(name);\n                        helper.Dlog(address);\n\n                        res.json({\n                            \"status\": \"1\",\n                            \"payload\": { \"name\": name, \"address\": address, \"image\": helper.ImagePath() + imageFileName },\n                            \"message\": msg_success\n                        })\n                    }\n                })\n            }\n        })\n    })\n\n}\n\nfunction car_brand_add(car_brand, callback) {\n    db.query('SELECT `brand_id`, `brand_name`, `status`, `created_date`, `modify_date` FROM `car_brand` WHERE `brand_name` = ?', [car_brand.toUpperCase()], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return\n        }\n\n        if (result.length > 0) {\n            //Exits \n            db.query('UPDATE `car_brand` SET `modify_date` = (CASE WHEN  `status` = \"2\" THEN  NOW() ELSE `modify_date` END), `status` = (CASE WHEN  `status` = \"2\" THEN  0 ELSE `status` END) WHERE `brand_id` = ? ', [result[0].brand_id], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                }\n            })\n            return callback(result[0].brand_id);\n        } else {\n            //Add New \n            db.query(\"INSERT INTO `car_brand`( `brand_name`) VALUES (?)\", [car_brand.toUpperCase()], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return\n                }\n                return callback(result.insertId);\n            })\n        }\n    })\n}\n\nfunction car_model_add(brand_id, car_model, seat, callback) {\n    db.query('SELECT `model_id`, `brand_id`, `model_name`, `seat`, `status`, `created_date`, `modify_date` FROM `car_model` WHERE `brand_id` = ? AND `model_name` = ? AND `seat` = ?', [brand_id, car_model.toUpperCase(), seat], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return\n        }\n\n        if (result.length > 0) {\n            //Exits \n            db.query('UPDATE `car_brand` AS `cb` ' +\n                'INNER JOIN `car_model` AS `cm` ON `cb`.`brand_id` = `cm`.`brand_id` ' +\n                'SET `cm`.`modify_date` = (CASE WHEN  `cm`.`status` = \"2\" THEN  NOW() ELSE `cm`.`modify_date` END), `cm`.`status` = (CASE WHEN  `cm`.`status` = \"2\" THEN  0 ELSE `cm`.`status` END) ' +\n                '`cb`.`modify_date` = (CASE WHEN  `cb`.`status` = \"2\" THEN  NOW() ELSE `cb`.`modify_date` END), `cb`.`status` = (CASE WHEN  `cb`.`status` = \"2\" THEN  0 ELSE `cb`.`status` END)' +\n                ' WHERE `cm`.`model_id` = ? ', [result[0].model_id], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err);\n                    }\n                })\n            return callback(result[0].model_id);\n        } else {\n            //Add New \n            db.query(\"INSERT INTO `car_model` ( `brand_id`, `model_name`, `seat` ) VALUES (?,?,?)\", [brand_id, car_model.toUpperCase(), seat], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return\n                }\n                return callback(result.insertId);\n            })\n        }\n    })\n}\n\nfunction car_series_add(brand_id, model_id, car_series, callback) {\n    db.query('SELECT `series_id`, `brand_id`, `model_id`, `series_name`, `status`, `created_date`, `modify_date` FROM `car_series` WHERE `brand_id` = ? AND `model_id` = ? AND `series_name` = ?', [brand_id, model_id, car_series.toUpperCase()], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return\n        }\n\n        if (result.length > 0) {\n            //Exits \n            db.query('UPDATE `car_brand` AS `cb` ' +\n                'INNER JOIN `car_model` AS `cm` ON `cb`.`brand_id` = `cm`.`brand_id` ' +\n                'INNER JOIN `car_series` AS `cs` ON `cs`.`model_id` = `cm`.`model_id` ' +\n                'SET `cm`.`modify_date` = (CASE WHEN  `cm`.`status` = \"2\" THEN  NOW() ELSE `cm`.`modify_date` END), `cm`.`status` = (CASE WHEN  `cm`.`status` = \"2\" THEN  0 ELSE `cm`.`status` END) ' +\n                '`cb`.`modify_date` = (CASE WHEN  `cb`.`status` = \"2\" THEN  NOW() ELSE `cb`.`modify_date` END), `cb`.`status` = (CASE WHEN  `cb`.`status` = \"2\" THEN  0 ELSE `cb`.`status` END)' +\n                '`cs`.`modify_date` = (CASE WHEN  `cs`.`status` = \"2\" THEN  NOW() ELSE `cs`.`modify_date` END), `cs`.`status` = (CASE WHEN  `cs`.`status` = \"2\" THEN  0 ELSE `cs`.`status` END)' +\n                ' WHERE `cs`.`series_id` = ? ', [result[0].series_id], (err, result) => {\n                    if (err) {\n                        helper.ThrowHtmlError(err);\n                    }\n                })\n            return callback(result[0].series_id);\n        } else {\n            //Add New \n            db.query(\"INSERT INTO `car_series`( `brand_id`, `model_id`, `series_name` ) VALUES (?,?,?)\", [brand_id, model_id, car_series], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return\n                }\n                return callback(result.insertId);\n            })\n        }\n    })\n}\n\nfunction user_car_add(user_id, series_id, car_number, car_image_path, callback) {\n    helper.Dlog(\"calling user_car_add\");\n    db.query(\"SELECT `user_car_id` FROM `user_cars` WHERE `user_id` = ? AND `series_id` = ? AND `car_number` = ? AND `status` != 2 \", [user_id, series_id, car_number], (err, result) => {\n        if (err) {\n            helper.ThrowHtmlError(err);\n            return callback({ \"status\": \"0\", \"message\": msg_fail });\n        }\n\n        if (result.length == 0) {\n            var extension = car_image_path.originalFilename.substring(car_image_path.originalFilename.lastIndexOf(\".\") + 1);\n            var imageFileName = \"car/\" + helper.fileNameGenerate(extension);\n\n            var newPath = imageSavePath + imageFileName;\n\n            fs.rename(car_image_path.path, newPath, (err) => {\n\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return;\n                } else {\n                    helper.Dlog(\"image save done\");\n\n                }\n            })\n\n            db.query(\"INSERT INTO `user_cars`( `user_id`, `series_id`, `car_number`, `car_image`) VALUES (?,?,?, ? )\", [\n                user_id, series_id, car_number, imageFileName,\n            ], (err, result) => {\n                if (err) {\n                    helper.ThrowHtmlError(err);\n                    return callback({ \"status\": \"0\", \"message\": msg_fail });\n                }\n\n                if (result) {\n                    return callback({ \"status\": \"1\", \"message\": \"car added succfully\" });\n                } else {\n                    return callback({ \"status\": \"0\", \"message\": msg_fail });\n                }\n            })\n\n        } else {\n            return callback({ \"status\": \"0\", \"message\": \"this car already added\" });\n        }\n    })\n}\n\nfunction checkAccessToken(helperObj, res, callback, requireType = \"\") {\n    helper.Dlog(helperObj.access_token)\n    helper.CheckParameterValid(res, helperObj, [\"access_token\"], () => {\n        db.query('SELECT `user_id`, `name`, `email`, `gender`, `mobile`, `mobile_code`, `auth_token`,  `user_type`, `is_block`,  `image`, `status` FROM `user_detail` WHERE  `auth_token` = ? AND (`status` = ? OR `status` = ?) ', [helperObj.access_token, \"1\", \"2\"], (err, result) => {\n\n            if (err) {\n                helper.ThrowHtmlError(err);\n                return\n            }\n\n            helper.Dlog(result)\n\n            if (result.length > 0) {\n                if (requireType != \"\") {\n                    if (requireType == result[0].user_type) {\n                        return callback(result[0])\n                    } else {\n                        res.json({ \"status\": \"0\", \"code\": \"404\", \"message\": \"Access denied. Unauthorized user access.\" })\n                    }\n                } else {\n                    return callback(result[0])\n                }\n\n            } else {\n                res.json({ \"status\": \"0\", \"code\": \"404\", \"message\": \"Access denied. Unauthorized user access.\" })\n            }\n        })\n    })\n}"
        }
    ]
}