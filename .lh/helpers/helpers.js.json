{
    "sourceFile": "helpers/helpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1723801313924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723801337329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Fukuoka\";\n+const timezone_name = \"Asia/Kolkata\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1723805104254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Kolkata\";\n+const timezone_name = \"Asia/Fukuoka\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1723814389318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Tokyo\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3001/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723974516664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Tokyo\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3004/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724573593607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,441 +214,5 @@\n }\n \n process.on('uncaughtException', (err) => {\n \n-})\n-var moment = require('moment-timezone');\n-var fs = require('fs');\n-const { format } = require('path');\n-\n-const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n-const msg_server_internal_error = \"Server Internal Error\"\n-\n-module.exports = {\n-\n-    ImagePath:() => {\n-        return \"http://localhost:3001/img/\";\n-    },\n-\n-    ThrowHtmlError: (err, res) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if(err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if(res) {\n-            res.json({'status': '0', \"message\": msg_server_internal_error  })\n-            return\n-        }\n-    },\n-\n-    ThrowSocketError: (err, client, eventName ) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if (err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if (client) {\n-            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n-            return\n-        }\n-    },\n-\n-    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach( (key, indexOf)  => {\n-            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if(!isValid) {\n-\n-            if(!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n-        }else{\n-            return callback()\n-        }\n-    },\n-\n-    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach((key, indexOf) => {\n-            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if (!isValid) {\n-\n-            if (!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n-        } else {\n-            return callback()\n-        }\n-    },\n-\n-    createRequestToken: () => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 20; i > 0; i--) {\n-            result += chars[Math.floor(Math.random() * chars.length)];\n-\n-        }\n-\n-        return result;\n-    },\n-\n-    fileNameGenerate: (extension) => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n-        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n-    },\n-\n-    Dlog: (log) => {\n-        return Dlog(log);\n-    },\n-\n-    serverDateTime:(format) => {\n-        return serverDateTime(format);\n-    },\n-\n-    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n-        return serverDateTimeFormat(date, format);\n-    },\n-\n-    serverYYYYMMDDHHmmss:()=>{\n-        return serverYYYYMMDDHHmmss();\n-    },\n-\n-    isoDate:(date) => {\n-        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n-    },\n-    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n-    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n-        var jun = moment(new Date(date)).add(add_minutes, 'm');\n-        jun.tz(timezone_name).format();\n-        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n-        return jun.format(format);;\n-    },\n-    findNearByLocation: (lat, long, radius_km, callback) => {\n-        var latitude = parseFloat(lat);\n-        var longitude = parseFloat(long);\n-        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n-        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n-        var radius = 6371;\n-        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n-        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n-        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n-        return callback(minlat, maxlat, minlng, maxlng);\n-    },\n-\n-    distance: (lat1, lon1, lat2, lon2) => {\n-        return distance(lat1, lon1, lat2, lon2);\n-    },\n-\n-    timeDuration:(date1, date2, callback) => {\n-        var now = moment(date1);\n-        var end = moment(date2);\n-        var duration = moment.duration(now.diff(end));\n-        var totalMin = duration.asMinutes();\n-        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n-        if(totalMin > 60) {\n-            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n-        }\n-        return callback(totalMin, durationString)\n-\n-    }\n-\n-}\n-\n-\n-function serverDateTime(format) {\n-    var jun = moment(new Date());\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function serverDateTimeFormat(date,format) {\n-    var jun = moment(date);\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function Dlog(log) {\n-    if (app_debug_mode) {\n-        console.log(log);\n-    }\n-}\n-\n-function serverYYYYMMDDHHmmss() {\n-    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n-}\n-\n-function distance(lat1, lon1, lat2, lon2) {\n-    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n-    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n-    var theta = parseFloat(lon1) - parseFloat(lon2);\n-    var radtheta = Math.PI * theta / 180;\n-    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n-    dist = Math.acos(dist);\n-    dist = dist * 180 / Math.PI;\n-    dist = dist * 60 * 1.1515;\n-    dist = dist * 1.609344;\n-    //Dlog(dist);\n-    if (isNaN(dist)) {\n-        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n-        dist = 0;\n-    }\n-    //Dlog(\"dist :-\"+dist);\n-    return dist;\n-}\n-\n-process.on('uncaughtException', (err) => {\n-\n-})\n-var moment = require('moment-timezone');\n-var fs = require('fs');\n-const { format } = require('path');\n-\n-const app_debug_mode = true;\n-const timezone_name = \"Asia/Fukuoka\";\n-const msg_server_internal_error = \"Server Internal Error\"\n-\n-module.exports = {\n-\n-    ImagePath:() => {\n-        return \"http://localhost:3001/img/\";\n-    },\n-\n-    ThrowHtmlError: (err, res) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if(err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if(res) {\n-            res.json({'status': '0', \"message\": msg_server_internal_error  })\n-            return\n-        }\n-    },\n-\n-    ThrowSocketError: (err, client, eventName ) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if (err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if (client) {\n-            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n-            return\n-        }\n-    },\n-\n-    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach( (key, indexOf)  => {\n-            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if(!isValid) {\n-\n-            if(!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n-        }else{\n-            return callback()\n-        }\n-    },\n-\n-    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach((key, indexOf) => {\n-            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if (!isValid) {\n-\n-            if (!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n-        } else {\n-            return callback()\n-        }\n-    },\n-\n-    createRequestToken: () => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 20; i > 0; i--) {\n-            result += chars[Math.floor(Math.random() * chars.length)];\n-\n-        }\n-\n-        return result;\n-    },\n-\n-    fileNameGenerate: (extension) => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n-        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n-    },\n-\n-    Dlog: (log) => {\n-        return Dlog(log);\n-    },\n-\n-    serverDateTime:(format) => {\n-        return serverDateTime(format);\n-    },\n-\n-    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n-        return serverDateTimeFormat(date, format);\n-    },\n-\n-    serverYYYYMMDDHHmmss:()=>{\n-        return serverYYYYMMDDHHmmss();\n-    },\n-\n-    isoDate:(date) => {\n-        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n-    },\n-    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n-    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n-        var jun = moment(new Date(date)).add(add_minutes, 'm');\n-        jun.tz(timezone_name).format();\n-        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n-        return jun.format(format);;\n-    },\n-    findNearByLocation: (lat, long, radius_km, callback) => {\n-        var latitude = parseFloat(lat);\n-        var longitude = parseFloat(long);\n-        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n-        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n-        var radius = 6371;\n-        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n-        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n-        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n-        return callback(minlat, maxlat, minlng, maxlng);\n-    },\n-\n-    distance: (lat1, lon1, lat2, lon2) => {\n-        return distance(lat1, lon1, lat2, lon2);\n-    },\n-\n-    timeDuration:(date1, date2, callback) => {\n-        var now = moment(date1);\n-        var end = moment(date2);\n-        var duration = moment.duration(now.diff(end));\n-        var totalMin = duration.asMinutes();\n-        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n-        if(totalMin > 60) {\n-            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n-        }\n-        return callback(totalMin, durationString)\n-\n-    }\n-\n-}\n-\n-\n-function serverDateTime(format) {\n-    var jun = moment(new Date());\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function serverDateTimeFormat(date,format) {\n-    var jun = moment(date);\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function Dlog(log) {\n-    if (app_debug_mode) {\n-        console.log(log);\n-    }\n-}\n-\n-function serverYYYYMMDDHHmmss() {\n-    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n-}\n-\n-function distance(lat1, lon1, lat2, lon2) {\n-    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n-    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n-    var theta = parseFloat(lon1) - parseFloat(lon2);\n-    var radtheta = Math.PI * theta / 180;\n-    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n-    dist = Math.acos(dist);\n-    dist = dist * 180 / Math.PI;\n-    dist = dist * 60 * 1.1515;\n-    dist = dist * 1.609344;\n-    //Dlog(dist);\n-    if (isNaN(dist)) {\n-        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n-        dist = 0;\n-    }\n-    //Dlog(\"dist :-\"+dist);\n-    return dist;\n-}\n-\n-process.on('uncaughtException', (err) => {\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724582429257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n module.exports = {\n \n     ImagePath:() => {\n-        return \"http://localhost:3004/img/\";\n+        return \"http://localhost:3001/img/\";\n     },\n \n     ThrowHtmlError: (err, res) => {\n \n"
                },
                {
                    "date": 1724582544147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Tokyo\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3004/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725098347923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n+const timezone_name = \"Asia/Kolkata\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1725292600809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n module.exports = {\n \n     ImagePath:() => {\n-        return \"http://localhost:3004/img/\";\n+        return \"http://localhost:3001/img/\";\n     },\n \n     ThrowHtmlError: (err, res) => {\n \n"
                },
                {
                    "date": 1725301864068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n module.exports = {\n \n     ImagePath:() => {\n-        return \"http://localhost:3001/img/\";\n+        return \"http://localhost:3004/img/\";\n     },\n \n     ThrowHtmlError: (err, res) => {\n \n"
                },
                {
                    "date": 1725339553441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Kolkata\";\n+const timezone_name = \"Asia/Japan\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n@@ -214,223 +214,5 @@\n }\n \n process.on('uncaughtException', (err) => {\n \n-})\n-var moment = require('moment-timezone');\n-var fs = require('fs');\n-const { format } = require('path');\n-\n-const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n-const msg_server_internal_error = \"Server Internal Error\"\n-\n-module.exports = {\n-\n-    ImagePath:() => {\n-        return \"http://localhost:3001/img/\";\n-    },\n-\n-    ThrowHtmlError: (err, res) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if(err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if(res) {\n-            res.json({'status': '0', \"message\": msg_server_internal_error  })\n-            return\n-        }\n-    },\n-\n-    ThrowSocketError: (err, client, eventName ) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if (err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if (client) {\n-            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n-            return\n-        }\n-    },\n-\n-    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach( (key, indexOf)  => {\n-            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if(!isValid) {\n-\n-            if(!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n-        }else{\n-            return callback()\n-        }\n-    },\n-\n-    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach((key, indexOf) => {\n-            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if (!isValid) {\n-\n-            if (!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n-        } else {\n-            return callback()\n-        }\n-    },\n-\n-    createRequestToken: () => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 20; i > 0; i--) {\n-            result += chars[Math.floor(Math.random() * chars.length)];\n-\n-        }\n-\n-        return result;\n-    },\n-\n-    fileNameGenerate: (extension) => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n-        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n-    },\n-\n-    Dlog: (log) => {\n-        return Dlog(log);\n-    },\n-\n-    serverDateTime:(format) => {\n-        return serverDateTime(format);\n-    },\n-\n-    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n-        return serverDateTimeFormat(date, format);\n-    },\n-\n-    serverYYYYMMDDHHmmss:()=>{\n-        return serverYYYYMMDDHHmmss();\n-    },\n-\n-    isoDate:(date) => {\n-        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n-    },\n-    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n-    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n-        var jun = moment(new Date(date)).add(add_minutes, 'm');\n-        jun.tz(timezone_name).format();\n-        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n-        return jun.format(format);;\n-    },\n-    findNearByLocation: (lat, long, radius_km, callback) => {\n-        var latitude = parseFloat(lat);\n-        var longitude = parseFloat(long);\n-        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n-        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n-        var radius = 6371;\n-        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n-        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n-        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n-        return callback(minlat, maxlat, minlng, maxlng);\n-    },\n-\n-    distance: (lat1, lon1, lat2, lon2) => {\n-        return distance(lat1, lon1, lat2, lon2);\n-    },\n-\n-    timeDuration:(date1, date2, callback) => {\n-        var now = moment(date1);\n-        var end = moment(date2);\n-        var duration = moment.duration(now.diff(end));\n-        var totalMin = duration.asMinutes();\n-        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n-        if(totalMin > 60) {\n-            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n-        }\n-        return callback(totalMin, durationString)\n-\n-    }\n-\n-}\n-\n-\n-function serverDateTime(format) {\n-    var jun = moment(new Date());\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function serverDateTimeFormat(date,format) {\n-    var jun = moment(date);\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function Dlog(log) {\n-    if (app_debug_mode) {\n-        console.log(log);\n-    }\n-}\n-\n-function serverYYYYMMDDHHmmss() {\n-    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n-}\n-\n-function distance(lat1, lon1, lat2, lon2) {\n-    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n-    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n-    var theta = parseFloat(lon1) - parseFloat(lon2);\n-    var radtheta = Math.PI * theta / 180;\n-    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n-    dist = Math.acos(dist);\n-    dist = dist * 180 / Math.PI;\n-    dist = dist * 60 * 1.1515;\n-    dist = dist * 1.609344;\n-    //Dlog(dist);\n-    if (isNaN(dist)) {\n-        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n-        dist = 0;\n-    }\n-    //Dlog(\"dist :-\"+dist);\n-    return dist;\n-}\n-\n-process.on('uncaughtException', (err) => {\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341854908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Japan\";\n+const timezone_name = \"Asia/Tokyo\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1725343356563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Kolkata\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3004/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725343431996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,223 +214,5 @@\n }\n \n process.on('uncaughtException', (err) => {\n \n-})\n-var moment = require('moment-timezone');\n-var fs = require('fs');\n-const { format } = require('path');\n-\n-const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n-const msg_server_internal_error = \"Server Internal Error\"\n-\n-module.exports = {\n-\n-    ImagePath:() => {\n-        return \"http://localhost:3004/img/\";\n-    },\n-\n-    ThrowHtmlError: (err, res) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if(err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if(res) {\n-            res.json({'status': '0', \"message\": msg_server_internal_error  })\n-            return\n-        }\n-    },\n-\n-    ThrowSocketError: (err, client, eventName ) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if (err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if (client) {\n-            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n-            return\n-        }\n-    },\n-\n-    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach( (key, indexOf)  => {\n-            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if(!isValid) {\n-\n-            if(!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n-        }else{\n-            return callback()\n-        }\n-    },\n-\n-    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach((key, indexOf) => {\n-            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if (!isValid) {\n-\n-            if (!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n-        } else {\n-            return callback()\n-        }\n-    },\n-\n-    createRequestToken: () => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 20; i > 0; i--) {\n-            result += chars[Math.floor(Math.random() * chars.length)];\n-\n-        }\n-\n-        return result;\n-    },\n-\n-    fileNameGenerate: (extension) => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n-        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n-    },\n-\n-    Dlog: (log) => {\n-        return Dlog(log);\n-    },\n-\n-    serverDateTime:(format) => {\n-        return serverDateTime(format);\n-    },\n-\n-    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n-        return serverDateTimeFormat(date, format);\n-    },\n-\n-    serverYYYYMMDDHHmmss:()=>{\n-        return serverYYYYMMDDHHmmss();\n-    },\n-\n-    isoDate:(date) => {\n-        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n-    },\n-    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n-    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n-        var jun = moment(new Date(date)).add(add_minutes, 'm');\n-        jun.tz(timezone_name).format();\n-        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n-        return jun.format(format);;\n-    },\n-    findNearByLocation: (lat, long, radius_km, callback) => {\n-        var latitude = parseFloat(lat);\n-        var longitude = parseFloat(long);\n-        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n-        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n-        var radius = 6371;\n-        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n-        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n-        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n-        return callback(minlat, maxlat, minlng, maxlng);\n-    },\n-\n-    distance: (lat1, lon1, lat2, lon2) => {\n-        return distance(lat1, lon1, lat2, lon2);\n-    },\n-\n-    timeDuration:(date1, date2, callback) => {\n-        var now = moment(date1);\n-        var end = moment(date2);\n-        var duration = moment.duration(now.diff(end));\n-        var totalMin = duration.asMinutes();\n-        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n-        if(totalMin > 60) {\n-            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n-        }\n-        return callback(totalMin, durationString)\n-\n-    }\n-\n-}\n-\n-\n-function serverDateTime(format) {\n-    var jun = moment(new Date());\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function serverDateTimeFormat(date,format) {\n-    var jun = moment(date);\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function Dlog(log) {\n-    if (app_debug_mode) {\n-        console.log(log);\n-    }\n-}\n-\n-function serverYYYYMMDDHHmmss() {\n-    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n-}\n-\n-function distance(lat1, lon1, lat2, lon2) {\n-    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n-    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n-    var theta = parseFloat(lon1) - parseFloat(lon2);\n-    var radtheta = Math.PI * theta / 180;\n-    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n-    dist = Math.acos(dist);\n-    dist = dist * 180 / Math.PI;\n-    dist = dist * 60 * 1.1515;\n-    dist = dist * 1.609344;\n-    //Dlog(dist);\n-    if (isNaN(dist)) {\n-        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n-        dist = 0;\n-    }\n-    //Dlog(\"dist :-\"+dist);\n-    return dist;\n-}\n-\n-process.on('uncaughtException', (err) => {\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725344089587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Kolkata\";\n+const timezone_name = \"Asia/Fukuoka\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1725344961040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Tokyo\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3004/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725345145108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n+const timezone_name = \"Asia/Kolkata\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n@@ -214,223 +214,5 @@\n }\n \n process.on('uncaughtException', (err) => {\n \n-})\n-var moment = require('moment-timezone');\n-var fs = require('fs');\n-const { format } = require('path');\n-\n-const app_debug_mode = true;\n-const timezone_name = \"Asia/Fukuoka\";\n-const msg_server_internal_error = \"Server Internal Error\"\n-\n-module.exports = {\n-\n-    ImagePath:() => {\n-        return \"http://localhost:3004/img/\";\n-    },\n-\n-    ThrowHtmlError: (err, res) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if(err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if(res) {\n-            res.json({'status': '0', \"message\": msg_server_internal_error  })\n-            return\n-        }\n-    },\n-\n-    ThrowSocketError: (err, client, eventName ) => {\n-\n-        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n-        Dlog(err.stack);\n-\n-        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n-            if (err) {\n-                Dlog(err);\n-            }\n-        })\n-\n-        if (client) {\n-            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n-            return\n-        }\n-    },\n-\n-    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach( (key, indexOf)  => {\n-            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if(!isValid) {\n-\n-            if(!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n-        }else{\n-            return callback()\n-        }\n-    },\n-\n-    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n-\n-        var isValid = true;\n-        var missingParameter = \"\";\n-\n-        checkKeys.forEach((key, indexOf) => {\n-            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n-                isValid = false;\n-                missingParameter += key + \" \";\n-            }\n-        });\n-\n-\n-        if (!isValid) {\n-\n-            if (!app_debug_mode) {\n-                missingParameter = \"\";\n-            }\n-            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n-        } else {\n-            return callback()\n-        }\n-    },\n-\n-    createRequestToken: () => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 20; i > 0; i--) {\n-            result += chars[Math.floor(Math.random() * chars.length)];\n-\n-        }\n-\n-        return result;\n-    },\n-\n-    fileNameGenerate: (extension) => {\n-        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-        var result = '';\n-        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n-        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n-    },\n-\n-    Dlog: (log) => {\n-        return Dlog(log);\n-    },\n-\n-    serverDateTime:(format) => {\n-        return serverDateTime(format);\n-    },\n-\n-    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n-        return serverDateTimeFormat(date, format);\n-    },\n-\n-    serverYYYYMMDDHHmmss:()=>{\n-        return serverYYYYMMDDHHmmss();\n-    },\n-\n-    isoDate:(date) => {\n-        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n-    },\n-    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n-    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n-        var jun = moment(new Date(date)).add(add_minutes, 'm');\n-        jun.tz(timezone_name).format();\n-        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n-        return jun.format(format);;\n-    },\n-    findNearByLocation: (lat, long, radius_km, callback) => {\n-        var latitude = parseFloat(lat);\n-        var longitude = parseFloat(long);\n-        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n-        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n-        var radius = 6371;\n-        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n-        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n-        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n-        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n-        return callback(minlat, maxlat, minlng, maxlng);\n-    },\n-\n-    distance: (lat1, lon1, lat2, lon2) => {\n-        return distance(lat1, lon1, lat2, lon2);\n-    },\n-\n-    timeDuration:(date1, date2, callback) => {\n-        var now = moment(date1);\n-        var end = moment(date2);\n-        var duration = moment.duration(now.diff(end));\n-        var totalMin = duration.asMinutes();\n-        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n-        if(totalMin > 60) {\n-            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n-        }\n-        return callback(totalMin, durationString)\n-\n-    }\n-\n-}\n-\n-\n-function serverDateTime(format) {\n-    var jun = moment(new Date());\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function serverDateTimeFormat(date,format) {\n-    var jun = moment(date);\n-    jun.tz(timezone_name).format();\n-    return jun.format(format);\n-}\n-\n-function Dlog(log) {\n-    if (app_debug_mode) {\n-        console.log(log);\n-    }\n-}\n-\n-function serverYYYYMMDDHHmmss() {\n-    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n-}\n-\n-function distance(lat1, lon1, lat2, lon2) {\n-    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n-    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n-    var theta = parseFloat(lon1) - parseFloat(lon2);\n-    var radtheta = Math.PI * theta / 180;\n-    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n-    dist = Math.acos(dist);\n-    dist = dist * 180 / Math.PI;\n-    dist = dist * 60 * 1.1515;\n-    dist = dist * 1.609344;\n-    //Dlog(dist);\n-    if (isNaN(dist)) {\n-        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n-        dist = 0;\n-    }\n-    //Dlog(\"dist :-\"+dist);\n-    return dist;\n-}\n-\n-process.on('uncaughtException', (err) => {\n-\n })\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725345188646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Kolkata\";\n+const timezone_name = \"Asia/Fukuoka\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1725345405067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+var moment = require('moment-timezone');\n+var fs = require('fs');\n+const { format } = require('path');\n+\n+const app_debug_mode = true;\n+const timezone_name = \"Asia/Tokyo\";\n+const msg_server_internal_error = \"Server Internal Error\"\n+\n+module.exports = {\n+\n+    ImagePath:() => {\n+        return \"http://localhost:3004/img/\";\n+    },\n+\n+    ThrowHtmlError: (err, res) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if(err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if(res) {\n+            res.json({'status': '0', \"message\": msg_server_internal_error  })\n+            return\n+        }\n+    },\n+\n+    ThrowSocketError: (err, client, eventName ) => {\n+\n+        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n+        Dlog(err.stack);\n+\n+        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n+            if (err) {\n+                Dlog(err);\n+            }\n+        })\n+\n+        if (client) {\n+            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n+            return\n+        }\n+    },\n+\n+    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach( (key, indexOf)  => {\n+            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if(!isValid) {\n+\n+            if(!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n+        }else{\n+            return callback()\n+        }\n+    },\n+\n+    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n+\n+        var isValid = true;\n+        var missingParameter = \"\";\n+\n+        checkKeys.forEach((key, indexOf) => {\n+            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n+                isValid = false;\n+                missingParameter += key + \" \";\n+            }\n+        });\n+\n+\n+        if (!isValid) {\n+\n+            if (!app_debug_mode) {\n+                missingParameter = \"\";\n+            }\n+            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n+        } else {\n+            return callback()\n+        }\n+    },\n+\n+    createRequestToken: () => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 20; i > 0; i--) {\n+            result += chars[Math.floor(Math.random() * chars.length)];\n+\n+        }\n+\n+        return result;\n+    },\n+\n+    fileNameGenerate: (extension) => {\n+        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+        var result = '';\n+        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n+        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n+    },\n+\n+    Dlog: (log) => {\n+        return Dlog(log);\n+    },\n+\n+    serverDateTime:(format) => {\n+        return serverDateTime(format);\n+    },\n+\n+    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n+        return serverDateTimeFormat(date, format);\n+    },\n+\n+    serverYYYYMMDDHHmmss:()=>{\n+        return serverYYYYMMDDHHmmss();\n+    },\n+\n+    isoDate:(date) => {\n+        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n+    },\n+    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n+    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n+        var jun = moment(new Date(date)).add(add_minutes, 'm');\n+        jun.tz(timezone_name).format();\n+        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n+        return jun.format(format);;\n+    },\n+    findNearByLocation: (lat, long, radius_km, callback) => {\n+        var latitude = parseFloat(lat);\n+        var longitude = parseFloat(long);\n+        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n+        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n+        var radius = 6371;\n+        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n+        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n+        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n+        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n+        return callback(minlat, maxlat, minlng, maxlng);\n+    },\n+\n+    distance: (lat1, lon1, lat2, lon2) => {\n+        return distance(lat1, lon1, lat2, lon2);\n+    },\n+\n+    timeDuration:(date1, date2, callback) => {\n+        var now = moment(date1);\n+        var end = moment(date2);\n+        var duration = moment.duration(now.diff(end));\n+        var totalMin = duration.asMinutes();\n+        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n+        if(totalMin > 60) {\n+            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n+        }\n+        return callback(totalMin, durationString)\n+\n+    }\n+\n+}\n+\n+\n+function serverDateTime(format) {\n+    var jun = moment(new Date());\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function serverDateTimeFormat(date,format) {\n+    var jun = moment(date);\n+    jun.tz(timezone_name).format();\n+    return jun.format(format);\n+}\n+\n+function Dlog(log) {\n+    if (app_debug_mode) {\n+        console.log(log);\n+    }\n+}\n+\n+function serverYYYYMMDDHHmmss() {\n+    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n+}\n+\n+function distance(lat1, lon1, lat2, lon2) {\n+    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n+    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n+    var theta = parseFloat(lon1) - parseFloat(lon2);\n+    var radtheta = Math.PI * theta / 180;\n+    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n+    dist = Math.acos(dist);\n+    dist = dist * 180 / Math.PI;\n+    dist = dist * 60 * 1.1515;\n+    dist = dist * 1.609344;\n+    //Dlog(dist);\n+    if (isNaN(dist)) {\n+        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n+        dist = 0;\n+    }\n+    //Dlog(\"dist :-\"+dist);\n+    return dist;\n+}\n+\n+process.on('uncaughtException', (err) => {\n+\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725363990025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Kolkata\";\n+const timezone_name = \"Asia/Tokyo\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                },
                {
                    "date": 1725365318692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n var fs = require('fs');\n const { format } = require('path');\n \n const app_debug_mode = true;\n-const timezone_name = \"Asia/Tokyo\";\n+const timezone_name = \"Asia/Kolkata\";\n const msg_server_internal_error = \"Server Internal Error\"\n \n module.exports = {\n \n"
                }
            ],
            "date": 1723801313924,
            "name": "Commit-0",
            "content": "var moment = require('moment-timezone');\nvar fs = require('fs');\nconst { format } = require('path');\n\nconst app_debug_mode = true;\nconst timezone_name = \"Asia/Fukuoka\";\nconst msg_server_internal_error = \"Server Internal Error\"\n\nmodule.exports = {\n\n    ImagePath:() => {\n        return \"http://localhost:3001/img/\";\n    },\n\n    ThrowHtmlError: (err, res) => {\n\n        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\" )\n        Dlog(err.stack);\n\n        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n            if(err) {\n                Dlog(err);\n            }\n        })\n\n        if(res) {\n            res.json({'status': '0', \"message\": msg_server_internal_error  })\n            return\n        }\n    },\n\n    ThrowSocketError: (err, client, eventName ) => {\n\n        Dlog(\"---------------------------- App is Helpers Throw Crash(\" + serverYYYYMMDDHHmmss() + \") -------------------------\")\n        Dlog(err.stack);\n\n        fs.appendFile('./crash_log/Crash' + serverDateTime('YYYY-MM-DD HH mm ss ms') + '.txt', err.stack, (err) => {\n            if (err) {\n                Dlog(err);\n            }\n        })\n\n        if (client) {\n            client.emit(eventName, { 'status': '0', \"message\": msg_server_internal_error } )\n            return\n        }\n    },\n\n    CheckParameterValid: (res, jsonObj, checkKeys, callback) => {\n\n        var isValid = true;\n        var missingParameter = \"\";\n\n        checkKeys.forEach( (key, indexOf)  => {\n            if(!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n                isValid = false;\n                missingParameter += key + \" \";\n            }\n        });\n\n\n        if(!isValid) {\n\n            if(!app_debug_mode) {\n                missingParameter = \"\";\n            }\n            res.json({ 'status': '0', \"message\": \"Missing parameter (\" + missingParameter +\")\"  })\n        }else{\n            return callback()\n        }\n    },\n\n    CheckParameterValidSocket: (client, eventName, jsonObj, checkKeys, callback) => {\n\n        var isValid = true;\n        var missingParameter = \"\";\n\n        checkKeys.forEach((key, indexOf) => {\n            if (!Object.prototype.hasOwnProperty.call(jsonObj, key)) {\n                isValid = false;\n                missingParameter += key + \" \";\n            }\n        });\n\n\n        if (!isValid) {\n\n            if (!app_debug_mode) {\n                missingParameter = \"\";\n            }\n            client.emit(eventName, { 'status': '0', \"message\": \"Missing parameter (\" + missingParameter + \")\" })\n        } else {\n            return callback()\n        }\n    },\n\n    createRequestToken: () => {\n        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        var result = '';\n        for (let i = 20; i > 0; i--) {\n            result += chars[Math.floor(Math.random() * chars.length)];\n\n        }\n\n        return result;\n    },\n\n    fileNameGenerate: (extension) => {\n        var chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        var result = '';\n        for (let i = 10; i > 0; i--) result += chars[Math.floor(Math.random() * chars.length)];\n        return serverDateTime('YYYYMMDDHHmmssms') + result + '.' + extension;\n    },\n\n    Dlog: (log) => {\n        return Dlog(log);\n    },\n\n    serverDateTime:(format) => {\n        return serverDateTime(format);\n    },\n\n    serverMySqlDate: (date, format = 'YYYY-MM-DD HH:mm:ss' ) => {\n        return serverDateTimeFormat(date, format);\n    },\n\n    serverYYYYMMDDHHmmss:()=>{\n        return serverYYYYMMDDHHmmss();\n    },\n\n    isoDate:(date) => {\n        return moment.tz(date, 'YYYY-MM-DD HH:mm:ss', timezone_name ).toISOString();\n    },\n    //serverDateTimeAddMin(bookingDetail.pickup_date, \"YYYY-MM-DD HH:mm:ss\", newRequestTimeABC)\n    serverDateTimeAddMin: (date, format = 'YYYY-MM-DD HH:mm:ss', add_minutes = 0 ) => {\n        var jun = moment(new Date(date)).add(add_minutes, 'm');\n        jun.tz(timezone_name).format();\n        //Dlog(\"server_datetime_add_minutes :- \" + jun.format(format));\n        return jun.format(format);;\n    },\n    findNearByLocation: (lat, long, radius_km, callback) => {\n        var latitude = parseFloat(lat);\n        var longitude = parseFloat(long);\n        var distance_find = parseFloat(radius_km); // value is km convent 1 miles = 1.60934 km\n        //Dlog(\"latitude : \" + latitude+ \"longitude : \"+longitude +\"distance_find : \" +distance_find);\n        var radius = 6371;\n        var maxlat = latitude + ((distance_find / radius) * 180 / Math.PI);\n        var minlat = latitude - ((distance_find / radius) * 180 / Math.PI);\n        var maxlng = longitude + ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n        var minlng = longitude - ((distance_find / radius / Math.cos(latitude * Math.PI / 180)) * 180 / Math.PI);\n        Dlog(\"minlat : \" + minlat + \"minmaxlatlat : \" + maxlat + \"minlng : \" + minlng + \"maxlng : \" + maxlng);\n        return callback(minlat, maxlat, minlng, maxlng);\n    },\n\n    distance: (lat1, lon1, lat2, lon2) => {\n        return distance(lat1, lon1, lat2, lon2);\n    },\n\n    timeDuration:(date1, date2, callback) => {\n        var now = moment(date1);\n        var end = moment(date2);\n        var duration = moment.duration(now.diff(end));\n        var totalMin = duration.asMinutes();\n        var durationString = moment.utc(duration.asMilliseconds()).format(\"mm:ss\")\n        if(totalMin > 60) {\n            durationString = moment.utc(duration.asMilliseconds()).format(\"HH:mm:ss\")\n        }\n        return callback(totalMin, durationString)\n\n    }\n\n}\n\n\nfunction serverDateTime(format) {\n    var jun = moment(new Date());\n    jun.tz(timezone_name).format();\n    return jun.format(format);\n}\n\nfunction serverDateTimeFormat(date,format) {\n    var jun = moment(date);\n    jun.tz(timezone_name).format();\n    return jun.format(format);\n}\n\nfunction Dlog(log) {\n    if (app_debug_mode) {\n        console.log(log);\n    }\n}\n\nfunction serverYYYYMMDDHHmmss() {\n    return serverDateTime('YYYY-MM-DD HH:mm:ss');\n}\n\nfunction distance(lat1, lon1, lat2, lon2) {\n    var radlat1 = Math.PI * parseFloat(lat1) / 180;\n    var radlat2 = Math.PI * parseFloat(lat2) / 180;\n    var theta = parseFloat(lon1) - parseFloat(lon2);\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n    dist = dist * 1.609344;\n    //Dlog(dist);\n    if (isNaN(dist)) {\n        //Dlog(\"Nan :- \"+lat1+\",\"+lon1+\",\"+lat2+\",\"+lon2+\",\");\n        dist = 0;\n    }\n    //Dlog(\"dist :-\"+dist);\n    return dist;\n}\n\nprocess.on('uncaughtException', (err) => {\n\n})"
        }
    ]
}