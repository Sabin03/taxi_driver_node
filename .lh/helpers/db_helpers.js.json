{
    "sourceFile": "helpers/db_helpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1723839089293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1723839089293,
            "name": "Commit-0",
            "content": "var mysql = require('mysql')\nvar config = require('config')\nvar dbConfig = config.get('dbConfig')\nvar db = mysql.createConnection(dbConfig);\nvar helper = require('./helpers')\n\nif(config.has('optionalFeature.detail')) {\n    var detail = config.get('optionalFeature.detail');\n    helper.Dlog('config: ' + detail);\n}\n\nreconnect(db, () => {});\n\nfunction reconnect(connection, callback) {\n    helper.Dlog(\"\\n New connection tentative ... (\" + helper.serverYYYYMMDDHHmmss() + \")\" )\n\n    connection = mysql.createConnection(dbConfig);\n    connection.connect((err) => {\n        if(err) {\n            helper.ThrowHtmlError(err);\n\n            setTimeout(() => {\n                helper.Dlog('----------------- DB ReConnecting Error (' + helper.serverYYYYMMDDHHmmss() + ') ....................' );\n\n                reconnect(connection, callback);\n            }, 5 * 1000);\n        }else{\n            helper.Dlog('\\n\\t ----- New Connection established with database. -------');\n            db = connection;\n            return callback();\n        }\n    } )\n\n    connection.on('error', (err) => {\n        helper.Dlog('----- App is connection Crash DB Helper (' + helper.serverYYYYMMDDHHmmss() + ') -------');\n\n        if (err.code === \"PROTOCOL_CONNECTION_LOST\") {\n            helper.Dlog(\"/!\\\\ PROTOCOL_CONNECTION_LOST Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        } else if (err.code === \"PROTOCOL_ENQUEUE_AFTER_QUIT\") {\n            helper.Dlog(\"/!\\\\ PROTOCOL_ENQUEUE_AFTER_QUIT Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        } else if (err.code === \"PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR\") {\n            helper.Dlog(\"/!\\\\ PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        } else if (err.code === \"PROTOCOL_ENQUEUE_HANDSHAKE_TWICE\") {\n            helper.Dlog(\"/!\\\\ PROTOCOL_ENQUEUE_HANDSHAKE_TWICE Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        } else if (err.code === \"ECONNREFUSED\") {\n            helper.Dlog(\"/!\\\\ ECONNREFUSED Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        } else if (err.code === \"PROTOCOL_PACKETS_OUT_OF_ORDER\") {\n            helper.Dlog(\"/!\\\\ PROTOCOL_PACKETS_OUT_OF_ORDER Cannot establish a connection with the database. /!\\\\ (\" + err.code + \")\");\n            reconnect(db, callback);\n        }  else {\n            throw err;\n        }\n    })\n\n}\n\nmodule.exports = {\n    query: (sqlQuery, args, callback) => {\n\n        if(db.state === 'authenticated' || db.state === \"connected\") {\n            db.query(sqlQuery, args, (error, result) => {\n                return callback(error, result);\n            })\n        }else if ( db.state === \"protocol_error\" ) {\n            reconnect(db, () => {\n                db.query(sqlQuery, args, (error, result) => {\n                    return callback(error, result);\n                })\n            })\n        }else{\n            reconnect(db, ()=>{\n                db.query(sqlQuery, args, (error, result ) => {\n                    return callback(error, result);\n                } )\n            })\n        }\n\n    }\n}\n\nprocess.on('uncaughtException', (err) => {\n\n    helper.Dlog('------------------------ App is Crash DB helper (' + helper.serverYYYYMMDDHHmmss() + ')-------------------------' );\n    helper.Dlog(err.code);\n    helper.ThrowHtmlError(err);\n})\n"
        }
    ]
}